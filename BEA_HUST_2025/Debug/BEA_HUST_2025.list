
BEA_HUST_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080062b4  080062b4  000072b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e0  080063e0  0000808c  2**0
                  CONTENTS
  4 .ARM          00000008  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e8  080063e8  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ec  080063ec  000073ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080063f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000808c  2**0
                  CONTENTS
 10 .bss          00003364  2000008c  2000008c  0000808c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200033f0  200033f0  0000808c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e10  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002836  00000000  00000000  00018ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  0001b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcd  00000000  00000000  0001c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e8a  00000000  00000000  0001d1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012114  00000000  00000000  0003e067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3999  00000000  00000000  0005017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113b14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004350  00000000  00000000  00113b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00117ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800629c 	.word	0x0800629c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800629c 	.word	0x0800629c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <DCM_ProcessRequest>:
#include "iso_tp.h"

// External functions from main.c
extern void USART3_SendString(uint8_t *ch);

void DCM_ProcessRequest(uint8_t *rx_buffer, uint8_t is_single_frame) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
    // Determine if this is single-frame (with PCI) or multi-frame (pure UDS data)
    uint8_t pci = rx_buffer[0] & 0xF0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f023 030f 	bic.w	r3, r3, #15
 80005b0:	72fb      	strb	r3, [r7, #11]
    uint8_t *uds_data;
    uint8_t data_len;
    
    if (is_single_frame && (pci == ISO_TP_PCI_SF)) {
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <DCM_ProcessRequest+0x34>
 80005b8:	7afb      	ldrb	r3, [r7, #11]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d108      	bne.n	80005d0 <DCM_ProcessRequest+0x34>
        // Single frame - extract UDS data after PCI
        data_len = rx_buffer[0] & 0x0F;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	72bb      	strb	r3, [r7, #10]
        uds_data = &rx_buffer[1];
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	e004      	b.n	80005da <DCM_ProcessRequest+0x3e>
    } else {
        // Multi-frame or pure UDS data - use the data directly
        uds_data = rx_buffer;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60fb      	str	r3, [r7, #12]
        data_len = iso_tp_rx_len; // Use the total length from ISO-TP
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <DCM_ProcessRequest+0x88>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	72bb      	strb	r3, [r7, #10]
    }
    
    // Process UDS service based on Service ID
    switch (uds_data[0]) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b2e      	cmp	r3, #46	@ 0x2e
 80005e0:	d012      	beq.n	8000608 <DCM_ProcessRequest+0x6c>
 80005e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80005e4:	dc16      	bgt.n	8000614 <DCM_ProcessRequest+0x78>
 80005e6:	2b22      	cmp	r3, #34	@ 0x22
 80005e8:	d002      	beq.n	80005f0 <DCM_ProcessRequest+0x54>
 80005ea:	2b27      	cmp	r3, #39	@ 0x27
 80005ec:	d006      	beq.n	80005fc <DCM_ProcessRequest+0x60>
 80005ee:	e011      	b.n	8000614 <DCM_ProcessRequest+0x78>
        case 0x22: // Read Data by Identifier
            DCM_RDBI_ProcessRequest(rx_buffer, is_single_frame);
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	4619      	mov	r1, r3
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f819 	bl	800062c <DCM_RDBI_ProcessRequest>
            break;
 80005fa:	e00f      	b.n	800061c <DCM_ProcessRequest+0x80>
        case 0x27: // Security Access
            DCM_SECA_ProcessRequest(rx_buffer, is_single_frame);
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	4619      	mov	r1, r3
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f889 	bl	8000718 <DCM_SECA_ProcessRequest>
            break;
 8000606:	e009      	b.n	800061c <DCM_ProcessRequest+0x80>
        case 0x2E: // Write Data by Identifier
            DCM_WDBI_ProcessRequest(rx_buffer, is_single_frame);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	4619      	mov	r1, r3
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f959 	bl	80008c4 <DCM_WDBI_ProcessRequest>
            break;
 8000612:	e003      	b.n	800061c <DCM_ProcessRequest+0x80>
        default:
            USART3_SendString((uint8_t*) "Service not supported\n");
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <DCM_ProcessRequest+0x8c>)
 8000616:	f001 f83d 	bl	8001694 <USART3_SendString>
            break;
 800061a:	bf00      	nop
    }
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20003298 	.word	0x20003298
 8000628:	080062b4 	.word	0x080062b4

0800062c <DCM_RDBI_ProcessRequest>:
#include "iso_tp.h"

// External functions from main.c
extern void delay(uint16_t delay);

void DCM_RDBI_ProcessRequest(uint8_t *rx_buffer, uint8_t is_single_frame) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
    delay(100);
 8000638:	2064      	movs	r0, #100	@ 0x64
 800063a:	f001 f8bd 	bl	80017b8 <delay>
    uint8_t response_data[8];
    uint8_t response_len;
    
    // Determine if this is single-frame (with PCI) or multi-frame (pure UDS data)
    uint8_t pci = rx_buffer[0] & 0xF0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	75bb      	strb	r3, [r7, #22]
    uint8_t *uds_data;
    uint8_t data_len;
    
    if (is_single_frame && (pci == ISO_TP_PCI_SF)) {
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00b      	beq.n	8000666 <DCM_RDBI_ProcessRequest+0x3a>
 800064e:	7dbb      	ldrb	r3, [r7, #22]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d108      	bne.n	8000666 <DCM_RDBI_ProcessRequest+0x3a>
        // Single frame - extract UDS data after PCI
        data_len = rx_buffer[0] & 0x0F;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	75fb      	strb	r3, [r7, #23]
        uds_data = &rx_buffer[1];
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	e004      	b.n	8000670 <DCM_RDBI_ProcessRequest+0x44>
    } else {
        // Multi-frame or pure UDS data - use the data directly
        uds_data = rx_buffer;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	61bb      	str	r3, [r7, #24]
        data_len = iso_tp_rx_len; // Use the total length from ISO-TP
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <DCM_RDBI_ProcessRequest+0xe0>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	75fb      	strb	r3, [r7, #23]
    }
    
    if (data_len != 3) // Invalid length
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d008      	beq.n	8000688 <DCM_RDBI_ProcessRequest+0x5c>
    {
        response_data[0] = NRC;
 8000676:	237f      	movs	r3, #127	@ 0x7f
 8000678:	733b      	strb	r3, [r7, #12]
        response_data[1] = READ_SID;
 800067a:	2322      	movs	r3, #34	@ 0x22
 800067c:	737b      	strb	r3, [r7, #13]
        response_data[2] = INVALID_LENGTH_RESPONSE_CODE;
 800067e:	2313      	movs	r3, #19
 8000680:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 8000682:	2303      	movs	r3, #3
 8000684:	77fb      	strb	r3, [r7, #31]
 8000686:	e02a      	b.n	80006de <DCM_RDBI_ProcessRequest+0xb2>
    } else if (((uds_data[1] << 8) | uds_data[2]) != AVAILABLE_SERVICE) // INVALID DID
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	3202      	adds	r2, #2
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	4313      	orrs	r3, r2
 8000698:	4a1d      	ldr	r2, [pc, #116]	@ (8000710 <DCM_RDBI_ProcessRequest+0xe4>)
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	4293      	cmp	r3, r2
 800069e:	d008      	beq.n	80006b2 <DCM_RDBI_ProcessRequest+0x86>
    {
        response_data[0] = NRC;
 80006a0:	237f      	movs	r3, #127	@ 0x7f
 80006a2:	733b      	strb	r3, [r7, #12]
        response_data[1] = READ_SID;
 80006a4:	2322      	movs	r3, #34	@ 0x22
 80006a6:	737b      	strb	r3, [r7, #13]
        response_data[2] = INVALID_DID_RESPONSE_CODE;
 80006a8:	2331      	movs	r3, #49	@ 0x31
 80006aa:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e015      	b.n	80006de <DCM_RDBI_ProcessRequest+0xb2>
    } else // Correct message
    {
        response_data[0] = uds_data[0] + 0x40; // Positive response
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	3340      	adds	r3, #64	@ 0x40
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	733b      	strb	r3, [r7, #12]
        response_data[1] = uds_data[1];
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	737b      	strb	r3, [r7, #13]
        response_data[2] = uds_data[2];
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	73bb      	strb	r3, [r7, #14]
        response_data[3] = (CAN1_pHeader.StdId) >> 8;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <DCM_RDBI_ProcessRequest+0xe8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
        response_data[4] = CAN1_pHeader.StdId & 0xFF;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <DCM_RDBI_ProcessRequest+0xe8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	743b      	strb	r3, [r7, #16]
        response_len = 5;
 80006da:	2305      	movs	r3, #5
 80006dc:	77fb      	strb	r3, [r7, #31]
    }
    
    // Send response using ISO-TP
    if (response_len <= 7) {
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	d807      	bhi.n	80006f4 <DCM_RDBI_ProcessRequest+0xc8>
        iso_tp_send_sf(response_data, response_len);
 80006e4:	7ffa      	ldrb	r2, [r7, #31]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fb67 	bl	8000dc0 <iso_tp_send_sf>
    } else {
        iso_tp_send_ff(response_data, response_len);
    }
}
 80006f2:	e007      	b.n	8000704 <DCM_RDBI_ProcessRequest+0xd8>
        iso_tp_send_ff(response_data, response_len);
 80006f4:	7ffb      	ldrb	r3, [r7, #31]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fb9c 	bl	8000e3c <iso_tp_send_ff>
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20003298 	.word	0x20003298
 8000710:	20000006 	.word	0x20000006
 8000714:	20002198 	.word	0x20002198

08000718 <DCM_SECA_ProcessRequest>:
extern uint8_t compare_key(uint8_t *array1, uint8_t *array2, uint8_t length);
extern uint8_t SEED[6];
extern uint8_t KEY[6];
extern TIM_HandleTypeDef htim3;

void DCM_SECA_ProcessRequest(uint8_t *rx_buffer, uint8_t is_single_frame) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
    delay(100);
 8000724:	2064      	movs	r0, #100	@ 0x64
 8000726:	f001 f847 	bl	80017b8 <delay>
    uint8_t response_data[8];
    uint8_t response_len;
    
    // Determine if this is single-frame (with PCI) or multi-frame (pure UDS data)
    uint8_t pci = rx_buffer[0] & 0xF0;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f023 030f 	bic.w	r3, r3, #15
 8000732:	75fb      	strb	r3, [r7, #23]
    uint8_t *uds_data;
    uint8_t data_len;
    
    if (is_single_frame && (pci == ISO_TP_PCI_SF)) {
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00b      	beq.n	8000752 <DCM_SECA_ProcessRequest+0x3a>
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d108      	bne.n	8000752 <DCM_SECA_ProcessRequest+0x3a>
        // Single frame - extract UDS data after PCI
        data_len = rx_buffer[0] & 0x0F;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	77fb      	strb	r3, [r7, #31]
        uds_data = &rx_buffer[1];
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	e004      	b.n	800075c <DCM_SECA_ProcessRequest+0x44>
    } else {
        // Multi-frame or pure UDS data - use the data directly
        // For multi-frame, rx_buffer already contains pure UDS data
        uds_data = rx_buffer;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	623b      	str	r3, [r7, #32]
        data_len = iso_tp_rx_len; // Use the total length from ISO-TP
 8000756:	4b54      	ldr	r3, [pc, #336]	@ (80008a8 <DCM_SECA_ProcessRequest+0x190>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	77fb      	strb	r3, [r7, #31]
    }
    
    switch (uds_data[1]) { // Sub-function
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	3301      	adds	r3, #1
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d002      	beq.n	800076c <DCM_SECA_ProcessRequest+0x54>
 8000766:	2b02      	cmp	r3, #2
 8000768:	d033      	beq.n	80007d2 <DCM_SECA_ProcessRequest+0xba>
 800076a:	e077      	b.n	800085c <DCM_SECA_ProcessRequest+0x144>
    case 0x01: // Request Seed
        if (data_len != 2) {
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d00a      	beq.n	8000788 <DCM_SECA_ProcessRequest+0x70>
            response_data[0] = NRC;
 8000772:	237f      	movs	r3, #127	@ 0x7f
 8000774:	733b      	strb	r3, [r7, #12]
            response_data[1] = uds_data[0];  // Use original service ID instead of SESSION_SID
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	737b      	strb	r3, [r7, #13]
            response_data[2] = INVALID_LENGTH_RESPONSE_CODE;
 800077c:	2313      	movs	r3, #19
 800077e:	73bb      	strb	r3, [r7, #14]
            response_len = 3;
 8000780:	2303      	movs	r3, #3
 8000782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            response_len = 8;
            calculate_key(SEED, KEY);
            SeedProvided = 1;
        }
        break;
 8000786:	e074      	b.n	8000872 <DCM_SECA_ProcessRequest+0x15a>
            response_data[0] = uds_data[0] + 0x40; // Positive response
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3340      	adds	r3, #64	@ 0x40
 800078e:	b2db      	uxtb	r3, r3
 8000790:	733b      	strb	r3, [r7, #12]
            response_data[1] = 0x01;
 8000792:	2301      	movs	r3, #1
 8000794:	737b      	strb	r3, [r7, #13]
            for (int i = 0; i < 6; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e00c      	b.n	80007b6 <DCM_SECA_ProcessRequest+0x9e>
                response_data[i + 2] = SEED[i];
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	3302      	adds	r3, #2
 80007a0:	4942      	ldr	r1, [pc, #264]	@ (80008ac <DCM_SECA_ProcessRequest+0x194>)
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	440a      	add	r2, r1
 80007a6:	7812      	ldrb	r2, [r2, #0]
 80007a8:	3328      	adds	r3, #40	@ 0x28
 80007aa:	443b      	add	r3, r7
 80007ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (int i = 0; i < 6; i++) {
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	3301      	adds	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	ddef      	ble.n	800079c <DCM_SECA_ProcessRequest+0x84>
            response_len = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            calculate_key(SEED, KEY);
 80007c2:	493b      	ldr	r1, [pc, #236]	@ (80008b0 <DCM_SECA_ProcessRequest+0x198>)
 80007c4:	4839      	ldr	r0, [pc, #228]	@ (80008ac <DCM_SECA_ProcessRequest+0x194>)
 80007c6:	f001 f804 	bl	80017d2 <calculate_key>
            SeedProvided = 1;
 80007ca:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <DCM_SECA_ProcessRequest+0x19c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
        break;
 80007d0:	e04f      	b.n	8000872 <DCM_SECA_ProcessRequest+0x15a>
        
    case 0x02: // Send Key
        if (data_len != 8) {
 80007d2:	7ffb      	ldrb	r3, [r7, #31]
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	d00a      	beq.n	80007ee <DCM_SECA_ProcessRequest+0xd6>
            response_data[0] = NRC;
 80007d8:	237f      	movs	r3, #127	@ 0x7f
 80007da:	733b      	strb	r3, [r7, #12]
            response_data[1] = uds_data[0];  // Use original service ID instead of SESSION_SID
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	737b      	strb	r3, [r7, #13]
            response_data[2] = INVALID_LENGTH_RESPONSE_CODE;
 80007e2:	2313      	movs	r3, #19
 80007e4:	73bb      	strb	r3, [r7, #14]
            response_len = 3;
 80007e6:	2303      	movs	r3, #3
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            response_len = 2;
            SeedProvided = 0;
        } else {
            return; // Already unlocked or no seed provided
        }
        break;
 80007ec:	e041      	b.n	8000872 <DCM_SECA_ProcessRequest+0x15a>
        } else if (!compare_key(KEY, &uds_data[2], 6)) {
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	3302      	adds	r3, #2
 80007f2:	2206      	movs	r2, #6
 80007f4:	4619      	mov	r1, r3
 80007f6:	482e      	ldr	r0, [pc, #184]	@ (80008b0 <DCM_SECA_ProcessRequest+0x198>)
 80007f8:	f001 f912 	bl	8001a20 <compare_key>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <DCM_SECA_ProcessRequest+0x100>
            response_data[0] = NRC;                    // 0x7F
 8000802:	237f      	movs	r3, #127	@ 0x7f
 8000804:	733b      	strb	r3, [r7, #12]
            response_data[1] = uds_data[0];            // 0x27 (original service ID)
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	737b      	strb	r3, [r7, #13]
            response_data[2] = WRONG_KEY_RESPONSE_CODE; // 0x35
 800080c:	2335      	movs	r3, #53	@ 0x35
 800080e:	73bb      	strb	r3, [r7, #14]
            response_len = 3;
 8000810:	2303      	movs	r3, #3
 8000812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8000816:	e02c      	b.n	8000872 <DCM_SECA_ProcessRequest+0x15a>
        } else if (SeedProvided && !SecurityUnlocked) {
 8000818:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <DCM_SECA_ProcessRequest+0x19c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d03f      	beq.n	80008a0 <DCM_SECA_ProcessRequest+0x188>
 8000820:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <DCM_SECA_ProcessRequest+0x1a0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d13a      	bne.n	80008a0 <DCM_SECA_ProcessRequest+0x188>
            HAL_TIM_Base_Start_IT(&htim3);
 800082a:	4824      	ldr	r0, [pc, #144]	@ (80008bc <DCM_SECA_ProcessRequest+0x1a4>)
 800082c:	f003 fbec 	bl	8004008 <HAL_TIM_Base_Start_IT>
            SecurityUnlocked = 1;
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <DCM_SECA_ProcessRequest+0x1a0>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2101      	movs	r1, #1
 800083a:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <DCM_SECA_ProcessRequest+0x1a8>)
 800083c:	f002 febe 	bl	80035bc <HAL_GPIO_WritePin>
            response_data[0] = uds_data[0] + 0x40; // Positive response
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3340      	adds	r3, #64	@ 0x40
 8000846:	b2db      	uxtb	r3, r3
 8000848:	733b      	strb	r3, [r7, #12]
            response_data[1] = 0x02;
 800084a:	2302      	movs	r3, #2
 800084c:	737b      	strb	r3, [r7, #13]
            response_len = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            SeedProvided = 0;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <DCM_SECA_ProcessRequest+0x19c>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
        break;
 800085a:	e00a      	b.n	8000872 <DCM_SECA_ProcessRequest+0x15a>
        
    default:
        response_data[0] = NRC;
 800085c:	237f      	movs	r3, #127	@ 0x7f
 800085e:	733b      	strb	r3, [r7, #12]
        response_data[1] = uds_data[0];  // Use original service ID instead of SESSION_SID
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	737b      	strb	r3, [r7, #13]
        response_data[2] = INVALID_LENGTH_RESPONSE_CODE;
 8000866:	2313      	movs	r3, #19
 8000868:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 800086a:	2303      	movs	r3, #3
 800086c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8000870:	bf00      	nop
    }
    
    // Send response using ISO-TP
    if (response_len <= 7) {
 8000872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000876:	2b07      	cmp	r3, #7
 8000878:	d808      	bhi.n	800088c <DCM_SECA_ProcessRequest+0x174>
        iso_tp_send_sf(response_data, response_len);
 800087a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fa9b 	bl	8000dc0 <iso_tp_send_sf>
 800088a:	e00a      	b.n	80008a2 <DCM_SECA_ProcessRequest+0x18a>
    } else {
        // Use auto-send for ECU responses (no Flow Control wait)
        iso_tp_send_response_auto(response_data, response_len);
 800088c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000890:	b29a      	uxth	r2, r3
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fbbb 	bl	8001014 <iso_tp_send_response_auto>
 800089e:	e000      	b.n	80008a2 <DCM_SECA_ProcessRequest+0x18a>
            return; // Already unlocked or no seed provided
 80008a0:	bf00      	nop
    }
}
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20003298 	.word	0x20003298
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20003260 	.word	0x20003260
 80008b4:	20003291 	.word	0x20003291
 80008b8:	20003290 	.word	0x20003290
 80008bc:	20002108 	.word	0x20002108
 80008c0:	40020400 	.word	0x40020400

080008c4 <DCM_WDBI_ProcessRequest>:
#include "iso_tp.h"

// External functions from main.c
extern void delay(uint16_t delay);

void DCM_WDBI_ProcessRequest(uint8_t *rx_buffer, uint8_t is_single_frame) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
    delay(100);
 80008d0:	2064      	movs	r0, #100	@ 0x64
 80008d2:	f000 ff71 	bl	80017b8 <delay>
    uint8_t response_data[8];
    uint8_t response_len;
    
    // Determine if this is single-frame (with PCI) or multi-frame (pure UDS data)
    uint8_t pci = rx_buffer[0] & 0xF0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f023 030f 	bic.w	r3, r3, #15
 80008de:	75bb      	strb	r3, [r7, #22]
    uint8_t *uds_data;
    uint8_t data_len;
    
    if (is_single_frame && (pci == ISO_TP_PCI_SF)) {
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00b      	beq.n	80008fe <DCM_WDBI_ProcessRequest+0x3a>
 80008e6:	7dbb      	ldrb	r3, [r7, #22]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d108      	bne.n	80008fe <DCM_WDBI_ProcessRequest+0x3a>
        // Single frame - extract UDS data after PCI
        data_len = rx_buffer[0] & 0x0F;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	75fb      	strb	r3, [r7, #23]
        uds_data = &rx_buffer[1];
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3301      	adds	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	e004      	b.n	8000908 <DCM_WDBI_ProcessRequest+0x44>
    } else {
        // Multi-frame or pure UDS data - use the data directly
        uds_data = rx_buffer;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	61bb      	str	r3, [r7, #24]
        data_len = iso_tp_rx_len; // Use the total length from ISO-TP
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <DCM_WDBI_ProcessRequest+0x120>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	75fb      	strb	r3, [r7, #23]
    }
    
    if (!SecurityUnlocked) {
 8000908:	4b37      	ldr	r3, [pc, #220]	@ (80009e8 <DCM_WDBI_ProcessRequest+0x124>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d108      	bne.n	8000924 <DCM_WDBI_ProcessRequest+0x60>
        response_data[0] = NRC;
 8000912:	237f      	movs	r3, #127	@ 0x7f
 8000914:	733b      	strb	r3, [r7, #12]
        response_data[1] = WRITE_SID;
 8000916:	232e      	movs	r3, #46	@ 0x2e
 8000918:	737b      	strb	r3, [r7, #13]
        response_data[2] = ACCESS_DENIED_CODE;
 800091a:	2333      	movs	r3, #51	@ 0x33
 800091c:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 800091e:	2303      	movs	r3, #3
 8000920:	77fb      	strb	r3, [r7, #31]
 8000922:	e048      	b.n	80009b6 <DCM_WDBI_ProcessRequest+0xf2>
    } else if (data_len < 5) {
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d808      	bhi.n	800093c <DCM_WDBI_ProcessRequest+0x78>
        response_data[0] = NRC;
 800092a:	237f      	movs	r3, #127	@ 0x7f
 800092c:	733b      	strb	r3, [r7, #12]
        response_data[1] = WRITE_SID;
 800092e:	232e      	movs	r3, #46	@ 0x2e
 8000930:	737b      	strb	r3, [r7, #13]
        response_data[2] = INVALID_LENGTH_RESPONSE_CODE;
 8000932:	2313      	movs	r3, #19
 8000934:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 8000936:	2303      	movs	r3, #3
 8000938:	77fb      	strb	r3, [r7, #31]
 800093a:	e03c      	b.n	80009b6 <DCM_WDBI_ProcessRequest+0xf2>
    } else if (((uds_data[1] << 8) | uds_data[2]) != AVAILABLE_SERVICE) // INVALID DID
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	3301      	adds	r3, #1
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	3202      	adds	r2, #2
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4313      	orrs	r3, r2
 800094c:	4a27      	ldr	r2, [pc, #156]	@ (80009ec <DCM_WDBI_ProcessRequest+0x128>)
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	4293      	cmp	r3, r2
 8000952:	d008      	beq.n	8000966 <DCM_WDBI_ProcessRequest+0xa2>
    {
        response_data[0] = NRC;
 8000954:	237f      	movs	r3, #127	@ 0x7f
 8000956:	733b      	strb	r3, [r7, #12]
        response_data[1] = WRITE_SID;
 8000958:	232e      	movs	r3, #46	@ 0x2e
 800095a:	737b      	strb	r3, [r7, #13]
        response_data[2] = INVALID_DID_RESPONSE_CODE;
 800095c:	2331      	movs	r3, #49	@ 0x31
 800095e:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 8000960:	2303      	movs	r3, #3
 8000962:	77fb      	strb	r3, [r7, #31]
 8000964:	e027      	b.n	80009b6 <DCM_WDBI_ProcessRequest+0xf2>
    } else {
        // Update the Data Identifier with the new written data
        AVAILABLE_SERVICE = ((((uint16_t) uds_data[3]) << 8) | (uds_data[4])) & 0xFFFF;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	3303      	adds	r3, #3
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b21b      	sxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3304      	adds	r3, #4
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21b      	sxth	r3, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <DCM_WDBI_ProcessRequest+0x128>)
 8000982:	801a      	strh	r2, [r3, #0]
        newStdID = ((((uint32_t) uds_data[3]) << 8) | (uds_data[4])) & 0x7FF;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	3303      	adds	r3, #3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	3204      	adds	r2, #4
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	4313      	orrs	r3, r2
 8000994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000998:	4a15      	ldr	r2, [pc, #84]	@ (80009f0 <DCM_WDBI_ProcessRequest+0x12c>)
 800099a:	6013      	str	r3, [r2, #0]
        response_data[0] = uds_data[0] + 0x40; // Positive response (0x6E)
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3340      	adds	r3, #64	@ 0x40
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	733b      	strb	r3, [r7, #12]
        response_data[1] = uds_data[3];        // Echo written data high byte
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	78db      	ldrb	r3, [r3, #3]
 80009aa:	737b      	strb	r3, [r7, #13]
        response_data[2] = uds_data[4];        // Echo written data low byte
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	73bb      	strb	r3, [r7, #14]
        response_len = 3;
 80009b2:	2303      	movs	r3, #3
 80009b4:	77fb      	strb	r3, [r7, #31]
    }
    
    // Send response using ISO-TP
    if (response_len <= 7) {
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d807      	bhi.n	80009cc <DCM_WDBI_ProcessRequest+0x108>
        iso_tp_send_sf(response_data, response_len);
 80009bc:	7ffa      	ldrb	r2, [r7, #31]
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f9fb 	bl	8000dc0 <iso_tp_send_sf>
    } else {
        iso_tp_send_ff(response_data, response_len);
    }
}
 80009ca:	e007      	b.n	80009dc <DCM_WDBI_ProcessRequest+0x118>
        iso_tp_send_ff(response_data, response_len);
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fa30 	bl	8000e3c <iso_tp_send_ff>
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20003298 	.word	0x20003298
 80009e8:	20003290 	.word	0x20003290
 80009ec:	20000006 	.word	0x20000006
 80009f0:	20003294 	.word	0x20003294

080009f4 <iso_tp_init>:
extern void Error_Handler(void);

// External DCM processing function
extern void DCM_ProcessRequest(uint8_t *rx_buffer, uint8_t is_single_frame);

void iso_tp_init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    iso_tp_state = ISO_TP_STATE_IDLE;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <iso_tp_init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
    iso_tp_rx_len = 0;
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <iso_tp_init+0x54>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	801a      	strh	r2, [r3, #0]
    iso_tp_rx_index = 0;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <iso_tp_init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	801a      	strh	r2, [r3, #0]
    iso_tp_tx_len = 0;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <iso_tp_init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	801a      	strh	r2, [r3, #0]
    iso_tp_tx_index = 0;
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <iso_tp_init+0x60>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	801a      	strh	r2, [r3, #0]
    iso_tp_sn = 1;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <iso_tp_init+0x64>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
    iso_tp_timer_start = 0;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <iso_tp_init+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
    iso_tp_timeout_value = 0;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <iso_tp_init+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
    memset(iso_tp_rx_buffer, 0, sizeof(iso_tp_rx_buffer));
 8000a28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <iso_tp_init+0x70>)
 8000a30:	f004 ffb6 	bl	80059a0 <memset>
    memset(iso_tp_tx_buffer, 0, sizeof(iso_tp_tx_buffer));
 8000a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <iso_tp_init+0x74>)
 8000a3c:	f004 ffb0 	bl	80059a0 <memset>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200020af 	.word	0x200020af
 8000a48:	20003298 	.word	0x20003298
 8000a4c:	200020a8 	.word	0x200020a8
 8000a50:	200020aa 	.word	0x200020aa
 8000a54:	200020ac 	.word	0x200020ac
 8000a58:	200020ae 	.word	0x200020ae
 8000a5c:	200020b0 	.word	0x200020b0
 8000a60:	200020b4 	.word	0x200020b4
 8000a64:	200000a8 	.word	0x200000a8
 8000a68:	200010a8 	.word	0x200010a8

08000a6c <iso_tp_timer_update>:

void iso_tp_timer_update(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
    if (iso_tp_timeout_value > 0) {
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <iso_tp_timer_update+0x30>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00c      	beq.n	8000a94 <iso_tp_timer_update+0x28>
        uint32_t current_time = HAL_GetTick();
 8000a7a:	f001 fbaf 	bl	80021dc <HAL_GetTick>
 8000a7e:	6078      	str	r0, [r7, #4]
        if ((current_time - iso_tp_timer_start) >= iso_tp_timeout_value) {
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <iso_tp_timer_update+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	1ad2      	subs	r2, r2, r3
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <iso_tp_timer_update+0x30>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d301      	bcc.n	8000a94 <iso_tp_timer_update+0x28>
            iso_tp_handle_timeout();
 8000a90:	f000 f81c 	bl	8000acc <iso_tp_handle_timeout>
        }
    }
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200020b4 	.word	0x200020b4
 8000aa0:	200020b0 	.word	0x200020b0

08000aa4 <iso_tp_start_timer>:

void iso_tp_start_timer(uint32_t timeout_ms) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    iso_tp_timer_start = HAL_GetTick();
 8000aac:	f001 fb96 	bl	80021dc <HAL_GetTick>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <iso_tp_start_timer+0x20>)
 8000ab4:	6013      	str	r3, [r2, #0]
    iso_tp_timeout_value = timeout_ms;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <iso_tp_start_timer+0x24>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200020b0 	.word	0x200020b0
 8000ac8:	200020b4 	.word	0x200020b4

08000acc <iso_tp_handle_timeout>:

void iso_tp_handle_timeout(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    if (iso_tp_state == ISO_TP_STATE_WAIT_FC) {
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <iso_tp_handle_timeout+0x14>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
    } else if (iso_tp_state == ISO_TP_STATE_RECEIVING_CF) {
        // N_Cr timeout: Consecutive Frame not received within timeout
    }
    
    // Always abort and reset to IDLE state on timeout
    iso_tp_init();
 8000ad6:	f7ff ff8d 	bl	80009f4 <iso_tp_init>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200020af 	.word	0x200020af

08000ae4 <iso_tp_get_data_length>:

uint8_t iso_tp_get_data_length(uint8_t *buffer, uint16_t *total_len) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    uint8_t pci = buffer[0] & 0xF0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f023 030f 	bic.w	r3, r3, #15
 8000af6:	73fb      	strb	r3, [r7, #15]
    uint8_t sf_len = buffer[0] & 0x0F;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	73bb      	strb	r3, [r7, #14]
    
    if (pci == ISO_TP_PCI_SF) {
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <iso_tp_get_data_length+0x30>
        *total_len = sf_len;
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	801a      	strh	r2, [r3, #0]
        return 1; // Data starts at index 1
 8000b10:	2301      	movs	r3, #1
 8000b12:	e016      	b.n	8000b42 <iso_tp_get_data_length+0x5e>
    } else if (pci == ISO_TP_PCI_FF) {
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d112      	bne.n	8000b40 <iso_tp_get_data_length+0x5c>
        *total_len = ((uint16_t)(buffer[0] & 0x0F) << 8) | buffer[1];
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	801a      	strh	r2, [r3, #0]
        return 2; // Data starts at index 2
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e000      	b.n	8000b42 <iso_tp_get_data_length+0x5e>
    }
    return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <iso_tp_process_rx>:

void iso_tp_process_rx(uint8_t *can_data) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    uint8_t pci = can_data[0] & 0xF0;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f023 030f 	bic.w	r3, r3, #15
 8000b60:	73fb      	strb	r3, [r7, #15]
    uint16_t total_len;
    uint8_t data_start_idx;
    uint8_t data_len;
    
    switch (pci) {
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b30      	cmp	r3, #48	@ 0x30
 8000b66:	f000 80bc 	beq.w	8000ce2 <iso_tp_process_rx+0x192>
 8000b6a:	2b30      	cmp	r3, #48	@ 0x30
 8000b6c:	f300 80dd 	bgt.w	8000d2a <iso_tp_process_rx+0x1da>
 8000b70:	2b20      	cmp	r3, #32
 8000b72:	d05e      	beq.n	8000c32 <iso_tp_process_rx+0xe2>
 8000b74:	2b20      	cmp	r3, #32
 8000b76:	f300 80d8 	bgt.w	8000d2a <iso_tp_process_rx+0x1da>
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <iso_tp_process_rx+0x34>
 8000b7e:	2b10      	cmp	r3, #16
 8000b80:	d01d      	beq.n	8000bbe <iso_tp_process_rx+0x6e>
                    iso_tp_init();
                }
            }
            break;
    }
}
 8000b82:	e0d2      	b.n	8000d2a <iso_tp_process_rx+0x1da>
            data_start_idx = iso_tp_get_data_length(can_data, &total_len);
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffaa 	bl	8000ae4 <iso_tp_get_data_length>
 8000b90:	4603      	mov	r3, r0
 8000b92:	72bb      	strb	r3, [r7, #10]
            if (total_len > 0 && total_len <= 7) {
 8000b94:	893b      	ldrh	r3, [r7, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80c0 	beq.w	8000d1c <iso_tp_process_rx+0x1cc>
 8000b9c:	893b      	ldrh	r3, [r7, #8]
 8000b9e:	2b07      	cmp	r3, #7
 8000ba0:	f200 80bc 	bhi.w	8000d1c <iso_tp_process_rx+0x1cc>
                memcpy(REQ_BUFFER, &can_data[data_start_idx], total_len);
 8000ba4:	7abb      	ldrb	r3, [r7, #10]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4861      	ldr	r0, [pc, #388]	@ (8000d34 <iso_tp_process_rx+0x1e4>)
 8000bb0:	f004 ff2a 	bl	8005a08 <memcpy>
                DCM_ProcessRequest(can_data, 1); // 1 = single frame
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fcf0 	bl	800059c <DCM_ProcessRequest>
            break;
 8000bbc:	e0ae      	b.n	8000d1c <iso_tp_process_rx+0x1cc>
            data_start_idx = iso_tp_get_data_length(can_data, &iso_tp_rx_len);
 8000bbe:	495e      	ldr	r1, [pc, #376]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff8f 	bl	8000ae4 <iso_tp_get_data_length>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	72bb      	strb	r3, [r7, #10]
            if (iso_tp_rx_len > 7 && iso_tp_rx_len < 4096) {
 8000bca:	4b5b      	ldr	r3, [pc, #364]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	f240 80a6 	bls.w	8000d20 <iso_tp_process_rx+0x1d0>
 8000bd4:	4b58      	ldr	r3, [pc, #352]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000bdc:	f080 80a0 	bcs.w	8000d20 <iso_tp_process_rx+0x1d0>
                iso_tp_state = ISO_TP_STATE_RECEIVING_FF;
 8000be0:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	701a      	strb	r2, [r3, #0]
                iso_tp_rx_index = 0;
 8000be6:	4b56      	ldr	r3, [pc, #344]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
                iso_tp_sn = 1;
 8000bec:	4b55      	ldr	r3, [pc, #340]	@ (8000d44 <iso_tp_process_rx+0x1f4>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
                data_len = 8 - data_start_idx;
 8000bf2:	7abb      	ldrb	r3, [r7, #10]
 8000bf4:	f1c3 0308 	rsb	r3, r3, #8
 8000bf8:	72fb      	strb	r3, [r7, #11]
                memcpy(&iso_tp_rx_buffer[iso_tp_rx_index], &can_data[data_start_idx], data_len);
 8000bfa:	4b51      	ldr	r3, [pc, #324]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b51      	ldr	r3, [pc, #324]	@ (8000d48 <iso_tp_process_rx+0x1f8>)
 8000c02:	18d0      	adds	r0, r2, r3
 8000c04:	7abb      	ldrb	r3, [r7, #10]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	7afa      	ldrb	r2, [r7, #11]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f004 fefb 	bl	8005a08 <memcpy>
                iso_tp_rx_index += data_len;
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b4a      	ldr	r3, [pc, #296]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b48      	ldr	r3, [pc, #288]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c20:	801a      	strh	r2, [r3, #0]
                iso_tp_send_fc(FC_CTS);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f892 	bl	8000d4c <iso_tp_send_fc>
                iso_tp_start_timer(ISO_TP_TIMEOUT_CF);
 8000c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2c:	f7ff ff3a 	bl	8000aa4 <iso_tp_start_timer>
            break;
 8000c30:	e076      	b.n	8000d20 <iso_tp_process_rx+0x1d0>
            if (iso_tp_state == ISO_TP_STATE_RECEIVING_FF || iso_tp_state == ISO_TP_STATE_RECEIVING_CF) {
 8000c32:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d003      	beq.n	8000c42 <iso_tp_process_rx+0xf2>
 8000c3a:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d170      	bne.n	8000d24 <iso_tp_process_rx+0x1d4>
                uint8_t expected_sn = iso_tp_sn & 0x0F;
 8000c42:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <iso_tp_process_rx+0x1f4>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	737b      	strb	r3, [r7, #13]
                uint8_t received_sn = can_data[0] & 0x0F;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	733b      	strb	r3, [r7, #12]
                if (received_sn == expected_sn) {
 8000c56:	7b3a      	ldrb	r2, [r7, #12]
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d13e      	bne.n	8000cdc <iso_tp_process_rx+0x18c>
                    data_len = (iso_tp_rx_len - iso_tp_rx_index > 7) ? 7 : (iso_tp_rx_len - iso_tp_rx_index);
 8000c5e:	4b36      	ldr	r3, [pc, #216]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	bfa8      	it	ge
 8000c6e:	2307      	movge	r3, #7
 8000c70:	72fb      	strb	r3, [r7, #11]
                    memcpy(&iso_tp_rx_buffer[iso_tp_rx_index], &can_data[1], data_len);
 8000c72:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <iso_tp_process_rx+0x1f8>)
 8000c7a:	18d0      	adds	r0, r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	7afa      	ldrb	r2, [r7, #11]
 8000c82:	4619      	mov	r1, r3
 8000c84:	f004 fec0 	bl	8005a08 <memcpy>
                    iso_tp_rx_index += data_len;
 8000c88:	7afb      	ldrb	r3, [r7, #11]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000c96:	801a      	strh	r2, [r3, #0]
                    iso_tp_sn++;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <iso_tp_process_rx+0x1f4>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <iso_tp_process_rx+0x1f4>)
 8000ca2:	701a      	strb	r2, [r3, #0]
                    if (iso_tp_rx_index >= iso_tp_rx_len) {
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <iso_tp_process_rx+0x1f0>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d30d      	bcc.n	8000ccc <iso_tp_process_rx+0x17c>
                        memcpy(REQ_BUFFER, iso_tp_rx_buffer, iso_tp_rx_len);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <iso_tp_process_rx+0x1e8>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4924      	ldr	r1, [pc, #144]	@ (8000d48 <iso_tp_process_rx+0x1f8>)
 8000cb8:	481e      	ldr	r0, [pc, #120]	@ (8000d34 <iso_tp_process_rx+0x1e4>)
 8000cba:	f004 fea5 	bl	8005a08 <memcpy>
                        DCM_ProcessRequest(iso_tp_rx_buffer, 0); // 0 = multi-frame
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4821      	ldr	r0, [pc, #132]	@ (8000d48 <iso_tp_process_rx+0x1f8>)
 8000cc2:	f7ff fc6b 	bl	800059c <DCM_ProcessRequest>
                        iso_tp_init(); // Reset state
 8000cc6:	f7ff fe95 	bl	80009f4 <iso_tp_init>
            break;
 8000cca:	e02b      	b.n	8000d24 <iso_tp_process_rx+0x1d4>
                        iso_tp_state = ISO_TP_STATE_RECEIVING_CF;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	701a      	strb	r2, [r3, #0]
                        iso_tp_start_timer(ISO_TP_TIMEOUT_CF);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd6:	f7ff fee5 	bl	8000aa4 <iso_tp_start_timer>
            break;
 8000cda:	e023      	b.n	8000d24 <iso_tp_process_rx+0x1d4>
                    iso_tp_init();
 8000cdc:	f7ff fe8a 	bl	80009f4 <iso_tp_init>
            break;
 8000ce0:	e020      	b.n	8000d24 <iso_tp_process_rx+0x1d4>
            if (iso_tp_state == ISO_TP_STATE_WAIT_FC) {
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d11e      	bne.n	8000d28 <iso_tp_process_rx+0x1d8>
                uint8_t fc_status = can_data[0] & 0x0F;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	73bb      	strb	r3, [r7, #14]
                if (fc_status == FC_CTS) {
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d105      	bne.n	8000d06 <iso_tp_process_rx+0x1b6>
                    iso_tp_state = ISO_TP_STATE_SENDING_CF;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <iso_tp_process_rx+0x1ec>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
                    iso_tp_send_cf();
 8000d00:	f000 f902 	bl	8000f08 <iso_tp_send_cf>
            break;
 8000d04:	e010      	b.n	8000d28 <iso_tp_process_rx+0x1d8>
                } else if (fc_status == FC_WAIT) {
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d104      	bne.n	8000d16 <iso_tp_process_rx+0x1c6>
                    iso_tp_start_timer(ISO_TP_TIMEOUT_FC);
 8000d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d10:	f7ff fec8 	bl	8000aa4 <iso_tp_start_timer>
            break;
 8000d14:	e008      	b.n	8000d28 <iso_tp_process_rx+0x1d8>
                    iso_tp_init();
 8000d16:	f7ff fe6d 	bl	80009f4 <iso_tp_init>
            break;
 8000d1a:	e005      	b.n	8000d28 <iso_tp_process_rx+0x1d8>
            break;
 8000d1c:	bf00      	nop
 8000d1e:	e004      	b.n	8000d2a <iso_tp_process_rx+0x1da>
            break;
 8000d20:	bf00      	nop
 8000d22:	e002      	b.n	8000d2a <iso_tp_process_rx+0x1da>
            break;
 8000d24:	bf00      	nop
 8000d26:	e000      	b.n	8000d2a <iso_tp_process_rx+0x1da>
            break;
 8000d28:	bf00      	nop
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000225c 	.word	0x2000225c
 8000d38:	20003298 	.word	0x20003298
 8000d3c:	200020af 	.word	0x200020af
 8000d40:	200020a8 	.word	0x200020a8
 8000d44:	200020ae 	.word	0x200020ae
 8000d48:	200000a8 	.word	0x200000a8

08000d4c <iso_tp_send_fc>:

void iso_tp_send_fc(uint8_t status) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
    CAN2_DATA_TX[0] = ISO_TP_PCI_FC | status;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <iso_tp_send_fc+0x64>)
 8000d60:	701a      	strb	r2, [r3, #0]
    CAN2_DATA_TX[1] = 0; // Block size (0 = no limit)
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <iso_tp_send_fc+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
    CAN2_DATA_TX[2] = ISO_TP_ST_MIN; // Separation time
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <iso_tp_send_fc+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	709a      	strb	r2, [r3, #2]
    for (int i = 3; i < 8; i++) {
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e007      	b.n	8000d84 <iso_tp_send_fc+0x38>
        CAN2_DATA_TX[i] = 0x55; // Padding
 8000d74:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <iso_tp_send_fc+0x64>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2255      	movs	r2, #85	@ 0x55
 8000d7c:	701a      	strb	r2, [r3, #0]
    for (int i = 3; i < 8; i++) {
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	ddf4      	ble.n	8000d74 <iso_tp_send_fc+0x28>
    }
    
    if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <iso_tp_send_fc+0x68>)
 8000d8c:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <iso_tp_send_fc+0x64>)
 8000d8e:	490a      	ldr	r1, [pc, #40]	@ (8000db8 <iso_tp_send_fc+0x6c>)
 8000d90:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <iso_tp_send_fc+0x70>)
 8000d92:	f001 fc73 	bl	800267c <HAL_CAN_AddTxMessage>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <iso_tp_send_fc+0x54>
        Error_Handler();
 8000d9c:	f000 ff6e 	bl	8001c7c <Error_Handler>
    }
    delay(100);
 8000da0:	2064      	movs	r0, #100	@ 0x64
 8000da2:	f000 fd09 	bl	80017b8 <delay>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20003278 	.word	0x20003278
 8000db4:	20002254 	.word	0x20002254
 8000db8:	200021f4 	.word	0x200021f4
 8000dbc:	200020e0 	.word	0x200020e0

08000dc0 <iso_tp_send_sf>:

void iso_tp_send_sf(uint8_t *data, uint8_t len) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
    if (len <= 7) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	d825      	bhi.n	8000e1e <iso_tp_send_sf+0x5e>
        CAN2_DATA_TX[0] = ISO_TP_PCI_SF | len;
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <iso_tp_send_sf+0x68>)
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	7013      	strb	r3, [r2, #0]
        memcpy(&CAN2_DATA_TX[1], data, len);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <iso_tp_send_sf+0x6c>)
 8000de0:	f004 fe12 	bl	8005a08 <memcpy>
        for (int i = len + 1; i < 8; i++) {
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e007      	b.n	8000dfc <iso_tp_send_sf+0x3c>
            CAN2_DATA_TX[i] = 0x55; // Padding
 8000dec:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <iso_tp_send_sf+0x68>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	2255      	movs	r2, #85	@ 0x55
 8000df4:	701a      	strb	r2, [r3, #0]
        for (int i = len + 1; i < 8; i++) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b07      	cmp	r3, #7
 8000e00:	ddf4      	ble.n	8000dec <iso_tp_send_sf+0x2c>
        }
        
        if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <iso_tp_send_sf+0x70>)
 8000e04:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <iso_tp_send_sf+0x68>)
 8000e06:	490b      	ldr	r1, [pc, #44]	@ (8000e34 <iso_tp_send_sf+0x74>)
 8000e08:	480b      	ldr	r0, [pc, #44]	@ (8000e38 <iso_tp_send_sf+0x78>)
 8000e0a:	f001 fc37 	bl	800267c <HAL_CAN_AddTxMessage>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <iso_tp_send_sf+0x58>
            Error_Handler();
 8000e14:	f000 ff32 	bl	8001c7c <Error_Handler>
        }
        delay(100);
 8000e18:	2064      	movs	r0, #100	@ 0x64
 8000e1a:	f000 fccd 	bl	80017b8 <delay>
    }
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20003278 	.word	0x20003278
 8000e2c:	20003279 	.word	0x20003279
 8000e30:	20002254 	.word	0x20002254
 8000e34:	200021f4 	.word	0x200021f4
 8000e38:	200020e0 	.word	0x200020e0

08000e3c <iso_tp_send_ff>:

void iso_tp_send_ff(uint8_t *data, uint16_t len) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
    if (len > 7 && len < 4096) {
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	2b07      	cmp	r3, #7
 8000e4c:	d944      	bls.n	8000ed8 <iso_tp_send_ff+0x9c>
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e54:	d240      	bcs.n	8000ed8 <iso_tp_send_ff+0x9c>
        // Store data for consecutive frames
        memcpy(iso_tp_tx_buffer, data, len);
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4820      	ldr	r0, [pc, #128]	@ (8000ee0 <iso_tp_send_ff+0xa4>)
 8000e5e:	f004 fdd3 	bl	8005a08 <memcpy>
        iso_tp_tx_len = len;
 8000e62:	4a20      	ldr	r2, [pc, #128]	@ (8000ee4 <iso_tp_send_ff+0xa8>)
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	8013      	strh	r3, [r2, #0]
        iso_tp_tx_index = 6; // First 6 bytes sent in FF
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <iso_tp_send_ff+0xac>)
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	801a      	strh	r2, [r3, #0]
        iso_tp_sn = 1;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <iso_tp_send_ff+0xb0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
        
        // Send First Frame
        CAN2_DATA_TX[0] = ISO_TP_PCI_FF | ((len >> 8) & 0x0F);
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <iso_tp_send_ff+0xb4>)
 8000e8c:	701a      	strb	r2, [r3, #0]
        CAN2_DATA_TX[1] = len & 0xFF;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <iso_tp_send_ff+0xb4>)
 8000e94:	705a      	strb	r2, [r3, #1]
        memcpy(&CAN2_DATA_TX[2], data, 6);
 8000e96:	2206      	movs	r2, #6
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4816      	ldr	r0, [pc, #88]	@ (8000ef4 <iso_tp_send_ff+0xb8>)
 8000e9c:	f004 fdb4 	bl	8005a08 <memcpy>
        
        // Print the first frame being sent
        PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <iso_tp_send_ff+0xbc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4912      	ldr	r1, [pc, #72]	@ (8000ef0 <iso_tp_send_ff+0xb4>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fc1b 	bl	80016e4 <PrintCANLog>
        
        if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <iso_tp_send_ff+0xc0>)
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <iso_tp_send_ff+0xb4>)
 8000eb2:	4911      	ldr	r1, [pc, #68]	@ (8000ef8 <iso_tp_send_ff+0xbc>)
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <iso_tp_send_ff+0xc4>)
 8000eb6:	f001 fbe1 	bl	800267c <HAL_CAN_AddTxMessage>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <iso_tp_send_ff+0x88>
            Error_Handler();
 8000ec0:	f000 fedc 	bl	8001c7c <Error_Handler>
        }
        
        iso_tp_state = ISO_TP_STATE_WAIT_FC;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <iso_tp_send_ff+0xc8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
        iso_tp_start_timer(ISO_TP_TIMEOUT_FC);
 8000eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ece:	f7ff fde9 	bl	8000aa4 <iso_tp_start_timer>
        delay(100);
 8000ed2:	2064      	movs	r0, #100	@ 0x64
 8000ed4:	f000 fc70 	bl	80017b8 <delay>
    }
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200010a8 	.word	0x200010a8
 8000ee4:	200020aa 	.word	0x200020aa
 8000ee8:	200020ac 	.word	0x200020ac
 8000eec:	200020ae 	.word	0x200020ae
 8000ef0:	20003278 	.word	0x20003278
 8000ef4:	2000327a 	.word	0x2000327a
 8000ef8:	200021f4 	.word	0x200021f4
 8000efc:	20002254 	.word	0x20002254
 8000f00:	200020e0 	.word	0x200020e0
 8000f04:	200020af 	.word	0x200020af

08000f08 <iso_tp_send_cf>:

void iso_tp_send_cf(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
    while (iso_tp_tx_index < iso_tp_tx_len && iso_tp_state == ISO_TP_STATE_SENDING_CF) {
 8000f0e:	e05e      	b.n	8000fce <iso_tp_send_cf+0xc6>
        CAN2_DATA_TX[0] = ISO_TP_PCI_CF | (iso_tp_sn & 0x0F);
 8000f10:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <iso_tp_send_cf+0xe4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <iso_tp_send_cf+0xe8>)
 8000f26:	701a      	strb	r2, [r3, #0]
        
        uint8_t remaining = iso_tp_tx_len - iso_tp_tx_index;
 8000f28:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <iso_tp_send_cf+0xec>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	70fb      	strb	r3, [r7, #3]
        uint8_t to_send = (remaining > 7) ? 7 : remaining;
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b07      	cmp	r3, #7
 8000f3c:	bf28      	it	cs
 8000f3e:	2307      	movcs	r3, #7
 8000f40:	70bb      	strb	r3, [r7, #2]
        
        memcpy(&CAN2_DATA_TX[1], &iso_tp_tx_buffer[iso_tp_tx_index], to_send);
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <iso_tp_send_cf+0xf4>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	78ba      	ldrb	r2, [r7, #2]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	482b      	ldr	r0, [pc, #172]	@ (8001000 <iso_tp_send_cf+0xf8>)
 8000f52:	f004 fd59 	bl	8005a08 <memcpy>
        iso_tp_tx_index += to_send;
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000f64:	801a      	strh	r2, [r3, #0]
        
        for (int i = to_send + 1; i < 8; i++) {
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	e007      	b.n	8000f7e <iso_tp_send_cf+0x76>
            CAN2_DATA_TX[i] = 0x55; // Padding
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <iso_tp_send_cf+0xe8>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	2255      	movs	r2, #85	@ 0x55
 8000f76:	701a      	strb	r2, [r3, #0]
        for (int i = to_send + 1; i < 8; i++) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	ddf4      	ble.n	8000f6e <iso_tp_send_cf+0x66>
        }
        
        // Print the consecutive frame being sent
        PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000f84:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <iso_tp_send_cf+0xfc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4919      	ldr	r1, [pc, #100]	@ (8000ff0 <iso_tp_send_cf+0xe8>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fba9 	bl	80016e4 <PrintCANLog>
        
        if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <iso_tp_send_cf+0x100>)
 8000f94:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <iso_tp_send_cf+0xe8>)
 8000f96:	491b      	ldr	r1, [pc, #108]	@ (8001004 <iso_tp_send_cf+0xfc>)
 8000f98:	481c      	ldr	r0, [pc, #112]	@ (800100c <iso_tp_send_cf+0x104>)
 8000f9a:	f001 fb6f 	bl	800267c <HAL_CAN_AddTxMessage>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <iso_tp_send_cf+0xa0>
            Error_Handler();
 8000fa4:	f000 fe6a 	bl	8001c7c <Error_Handler>
        }
        
        iso_tp_sn++;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <iso_tp_send_cf+0xe4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <iso_tp_send_cf+0xe4>)
 8000fb2:	701a      	strb	r2, [r3, #0]
        delay(ISO_TP_ST_MIN + 10); // Add small delay between frames
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 fbff 	bl	80017b8 <delay>
        
        if (iso_tp_tx_index >= iso_tp_tx_len) {
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <iso_tp_send_cf+0xec>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d303      	bcc.n	8000fce <iso_tp_send_cf+0xc6>
            // Transmission complete
            iso_tp_init();
 8000fc6:	f7ff fd15 	bl	80009f4 <iso_tp_init>
            break;
 8000fca:	bf00      	nop
        }
    }
}
 8000fcc:	e009      	b.n	8000fe2 <iso_tp_send_cf+0xda>
    while (iso_tp_tx_index < iso_tp_tx_len && iso_tp_state == ISO_TP_STATE_SENDING_CF) {
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <iso_tp_send_cf+0xf0>)
 8000fd0:	881a      	ldrh	r2, [r3, #0]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <iso_tp_send_cf+0xec>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d203      	bcs.n	8000fe2 <iso_tp_send_cf+0xda>
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <iso_tp_send_cf+0x108>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d096      	beq.n	8000f10 <iso_tp_send_cf+0x8>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200020ae 	.word	0x200020ae
 8000ff0:	20003278 	.word	0x20003278
 8000ff4:	200020aa 	.word	0x200020aa
 8000ff8:	200020ac 	.word	0x200020ac
 8000ffc:	200010a8 	.word	0x200010a8
 8001000:	20003279 	.word	0x20003279
 8001004:	200021f4 	.word	0x200021f4
 8001008:	20002254 	.word	0x20002254
 800100c:	200020e0 	.word	0x200020e0
 8001010:	200020af 	.word	0x200020af

08001014 <iso_tp_send_response_auto>:

// Special function for ECU responses - sends multi-frame without waiting for FC
void iso_tp_send_response_auto(uint8_t *data, uint16_t len) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
    if (len <= 7) {
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	2b07      	cmp	r3, #7
 8001024:	d806      	bhi.n	8001034 <iso_tp_send_response_auto+0x20>
        // Single Frame
        iso_tp_send_sf(data, len);
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fec7 	bl	8000dc0 <iso_tp_send_sf>
            if (sequence_number > 15) sequence_number = 0;
            
            delay(10); // Small delay between frames
        }
    }
}
 8001032:	e082      	b.n	800113a <iso_tp_send_response_auto+0x126>
        CAN2_DATA_TX[0] = ISO_TP_PCI_FF | ((len >> 8) & 0x0F);
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	b25b      	sxtb	r3, r3
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b3e      	ldr	r3, [pc, #248]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 800104c:	701a      	strb	r2, [r3, #0]
        CAN2_DATA_TX[1] = len & 0xFF;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b3c      	ldr	r3, [pc, #240]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 8001054:	705a      	strb	r2, [r3, #1]
        memcpy(&CAN2_DATA_TX[2], data, 6);
 8001056:	2206      	movs	r2, #6
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	483b      	ldr	r0, [pc, #236]	@ (8001148 <iso_tp_send_response_auto+0x134>)
 800105c:	f004 fcd4 	bl	8005a08 <memcpy>
        PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <iso_tp_send_response_auto+0x138>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4937      	ldr	r1, [pc, #220]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fb3b 	bl	80016e4 <PrintCANLog>
        if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <iso_tp_send_response_auto+0x13c>)
 8001070:	4a34      	ldr	r2, [pc, #208]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 8001072:	4936      	ldr	r1, [pc, #216]	@ (800114c <iso_tp_send_response_auto+0x138>)
 8001074:	4837      	ldr	r0, [pc, #220]	@ (8001154 <iso_tp_send_response_auto+0x140>)
 8001076:	f001 fb01 	bl	800267c <HAL_CAN_AddTxMessage>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <iso_tp_send_response_auto+0x70>
            Error_Handler();
 8001080:	f000 fdfc 	bl	8001c7c <Error_Handler>
        delay(50);
 8001084:	2032      	movs	r0, #50	@ 0x32
 8001086:	f000 fb97 	bl	80017b8 <delay>
        uint16_t sent_bytes = 6;
 800108a:	2306      	movs	r3, #6
 800108c:	82fb      	strh	r3, [r7, #22]
        uint8_t sequence_number = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	757b      	strb	r3, [r7, #21]
        while (sent_bytes < len) {
 8001092:	e04e      	b.n	8001132 <iso_tp_send_response_auto+0x11e>
            uint8_t remaining = len - sent_bytes;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	8afb      	ldrh	r3, [r7, #22]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	73fb      	strb	r3, [r7, #15]
            uint8_t to_send = (remaining > 7) ? 7 : remaining;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	bf28      	it	cs
 80010a6:	2307      	movcs	r3, #7
 80010a8:	73bb      	strb	r3, [r7, #14]
            CAN2_DATA_TX[0] = ISO_TP_PCI_CF | (sequence_number & 0x0F);
 80010aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 80010be:	701a      	strb	r2, [r3, #0]
            memcpy(&CAN2_DATA_TX[1], &data[sent_bytes], to_send);
 80010c0:	8afb      	ldrh	r3, [r7, #22]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	7bba      	ldrb	r2, [r7, #14]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4823      	ldr	r0, [pc, #140]	@ (8001158 <iso_tp_send_response_auto+0x144>)
 80010cc:	f004 fc9c 	bl	8005a08 <memcpy>
            for (int i = to_send + 1; i < 8; i++) {
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	3301      	adds	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	e007      	b.n	80010e8 <iso_tp_send_response_auto+0xd4>
                CAN2_DATA_TX[i] = 0x55;
 80010d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4413      	add	r3, r2
 80010de:	2255      	movs	r2, #85	@ 0x55
 80010e0:	701a      	strb	r2, [r3, #0]
            for (int i = to_send + 1; i < 8; i++) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3301      	adds	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	ddf4      	ble.n	80010d8 <iso_tp_send_response_auto+0xc4>
            PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <iso_tp_send_response_auto+0x138>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4913      	ldr	r1, [pc, #76]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 faf4 	bl	80016e4 <PrintCANLog>
            if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox) != HAL_OK) {
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <iso_tp_send_response_auto+0x13c>)
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <iso_tp_send_response_auto+0x130>)
 8001100:	4912      	ldr	r1, [pc, #72]	@ (800114c <iso_tp_send_response_auto+0x138>)
 8001102:	4814      	ldr	r0, [pc, #80]	@ (8001154 <iso_tp_send_response_auto+0x140>)
 8001104:	f001 faba 	bl	800267c <HAL_CAN_AddTxMessage>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <iso_tp_send_response_auto+0xfe>
                Error_Handler();
 800110e:	f000 fdb5 	bl	8001c7c <Error_Handler>
            sent_bytes += to_send;
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	b29a      	uxth	r2, r3
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	82fb      	strh	r3, [r7, #22]
            sequence_number++;
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	3301      	adds	r3, #1
 8001120:	757b      	strb	r3, [r7, #21]
            if (sequence_number > 15) sequence_number = 0;
 8001122:	7d7b      	ldrb	r3, [r7, #21]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d901      	bls.n	800112c <iso_tp_send_response_auto+0x118>
 8001128:	2300      	movs	r3, #0
 800112a:	757b      	strb	r3, [r7, #21]
            delay(10); // Small delay between frames
 800112c:	200a      	movs	r0, #10
 800112e:	f000 fb43 	bl	80017b8 <delay>
        while (sent_bytes < len) {
 8001132:	8afa      	ldrh	r2, [r7, #22]
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3ac      	bcc.n	8001094 <iso_tp_send_response_auto+0x80>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20003278 	.word	0x20003278
 8001148:	2000327a 	.word	0x2000327a
 800114c:	200021f4 	.word	0x200021f4
 8001150:	20002254 	.word	0x20002254
 8001154:	200020e0 	.word	0x200020e0
 8001158:	20003279 	.word	0x20003279

0800115c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001160:	f000 ffd6 	bl	8002110 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001164:	f000 f890 	bl	8001288 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001168:	f000 f9dc 	bl	8001524 <MX_GPIO_Init>
	MX_CAN1_Init();
 800116c:	f000 f8f6 	bl	800135c <MX_CAN1_Init>
	MX_CAN2_Init();
 8001170:	f000 f92a 	bl	80013c8 <MX_CAN2_Init>
	MX_USART3_UART_Init();
 8001174:	f000 f9ac 	bl	80014d0 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001178:	f000 f95c 	bl	8001434 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	CAN1CommSetup();
 800117c:	f000 fcde 	bl	8001b3c <CAN1CommSetup>
	CAN2CommSetup();
 8001180:	f000 fd18 	bl	8001bb4 <CAN2CommSetup>
	MX_CAN1_Setup();
 8001184:	f000 fa5e 	bl	8001644 <MX_CAN1_Setup>
	MX_CAN2_Setup();
 8001188:	f000 fa70 	bl	800166c <MX_CAN2_Setup>
	iso_tp_init();  // Initialize ISO-TP
 800118c:	f7ff fc32 	bl	80009f4 <iso_tp_init>
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001190:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <main+0xf8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <main+0xf8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	60da      	str	r2, [r3, #12]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	// Example Function to print can message via uart
	PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <main+0xfc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	492d      	ldr	r1, [pc, #180]	@ (800125c <main+0x100>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fa9b 	bl	80016e4 <PrintCANLog>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Update ISO-TP timer
		iso_tp_timer_update();
 80011ae:	f7ff fc5d 	bl	8000a6c <iso_tp_timer_update>
		
		// Check if CAN1 received a response (non-Flow Control) for display
		if (check == 1) {
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <main+0x104>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <main+0x7a>
			USART3_SendString((uint8_t*) "Response: ");
 80011bc:	4829      	ldr	r0, [pc, #164]	@ (8001264 <main+0x108>)
 80011be:	f000 fa69 	bl	8001694 <USART3_SendString>
			PrintCANLog(CAN1_pHeaderRx.StdId, CAN1_DATA_RX);
 80011c2:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <main+0x10c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4928      	ldr	r1, [pc, #160]	@ (800126c <main+0x110>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fa8a 	bl	80016e4 <PrintCANLog>
			check = 0;
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <main+0x104>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		}
		
		if (NumBytesReq != 0) {
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <main+0x114>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d014      	beq.n	8001208 <main+0xac>
			delay(100);
 80011de:	2064      	movs	r0, #100	@ 0x64
 80011e0:	f000 faea 	bl	80017b8 <delay>
			
			// Convert raw UDS data to ISO-TP frames
			// User sends: "27 01" → Program creates: "02 27 01"
			send_uds_request_via_can1(REQ_BUFFER, NumBytesReq);
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <main+0x114>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4822      	ldr	r0, [pc, #136]	@ (8001274 <main+0x118>)
 80011ec:	f000 fb38 	bl	8001860 <send_uds_request_via_can1>
			
			// Clear buffer after processing
			memset(REQ_BUFFER, 0, sizeof(REQ_BUFFER));
 80011f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f4:	2100      	movs	r1, #0
 80011f6:	481f      	ldr	r0, [pc, #124]	@ (8001274 <main+0x118>)
 80011f8:	f004 fbd2 	bl	80059a0 <memset>
			NumBytesReq = 0;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <main+0x114>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
			
			delay(100);
 8001202:	2064      	movs	r0, #100	@ 0x64
 8001204:	f000 fad8 	bl	80017b8 <delay>
		}
		if (!BtnU) /*IG OFF->ON stimulation*/
 8001208:	2102      	movs	r1, #2
 800120a:	481b      	ldr	r0, [pc, #108]	@ (8001278 <main+0x11c>)
 800120c:	f002 f9be 	bl	800358c <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1cb      	bne.n	80011ae <main+0x52>
		{
			delay(20);
 8001216:	2014      	movs	r0, #20
 8001218:	f000 face 	bl	80017b8 <delay>
			USART3_SendString((uint8_t*) "IG OFF ");
 800121c:	4817      	ldr	r0, [pc, #92]	@ (800127c <main+0x120>)
 800121e:	f000 fa39 	bl	8001694 <USART3_SendString>
			while (!BtnU)
 8001222:	bf00      	nop
 8001224:	2102      	movs	r1, #2
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <main+0x11c>)
 8001228:	f002 f9b0 	bl	800358c <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f8      	beq.n	8001224 <main+0xc8>
				;
			CAN1_pHeader.StdId = newStdID;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <main+0x124>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <main+0xfc>)
 8001238:	6013      	str	r3, [r2, #0]
			CAN2CommSetup();
 800123a:	f000 fcbb 	bl	8001bb4 <CAN2CommSetup>
			MX_CAN1_Setup();
 800123e:	f000 fa01 	bl	8001644 <MX_CAN1_Setup>
			MX_CAN2_Setup();
 8001242:	f000 fa13 	bl	800166c <MX_CAN2_Setup>
			USART3_SendString((uint8_t*) "-> IG ON \n");
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <main+0x128>)
 8001248:	f000 fa24 	bl	8001694 <USART3_SendString>
			delay(20);
 800124c:	2014      	movs	r0, #20
 800124e:	f000 fab3 	bl	80017b8 <delay>
		iso_tp_timer_update();
 8001252:	e7ac      	b.n	80011ae <main+0x52>
 8001254:	20002150 	.word	0x20002150
 8001258:	20002198 	.word	0x20002198
 800125c:	20003268 	.word	0x20003268
 8001260:	20003288 	.word	0x20003288
 8001264:	080062cc 	.word	0x080062cc
 8001268:	200021b0 	.word	0x200021b0
 800126c:	20003270 	.word	0x20003270
 8001270:	20002258 	.word	0x20002258
 8001274:	2000225c 	.word	0x2000225c
 8001278:	40020000 	.word	0x40020000
 800127c:	080062d8 	.word	0x080062d8
 8001280:	20003294 	.word	0x20003294
 8001284:	080062e0 	.word	0x080062e0

08001288 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	@ 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fb82 	bl	80059a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <SystemClock_Config+0xcc>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <SystemClock_Config+0xcc>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <SystemClock_Config+0xd0>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <SystemClock_Config+0xd0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 80012fc:	2350      	movs	r3, #80	@ 0x50
 80012fe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001304:	2304      	movs	r3, #4
 8001306:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f993 	bl	8003638 <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x94>
		Error_Handler();
 8001318:	f000 fcb0 	bl	8001c7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001332:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2102      	movs	r1, #2
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fbf4 	bl	8003b28 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xc2>
		Error_Handler();
 8001346:	f000 fc99 	bl	8001c7c <Error_Handler>
	}
}
 800134a:	bf00      	nop
 800134c:	3750      	adds	r7, #80	@ 0x50
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001362:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <MX_CAN1_Init+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 21;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001368:	2215      	movs	r2, #21
 800136a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_CAN1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_CAN1_Init+0x64>)
 800137a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800137e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001382:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001386:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_CAN1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <MX_CAN1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_CAN1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <MX_CAN1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_CAN1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <MX_CAN1_Init+0x64>)
 80013ae:	f000 ff45 	bl	800223c <HAL_CAN_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_CAN1_Init+0x60>
		Error_Handler();
 80013b8:	f000 fc60 	bl	8001c7c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200020b8 	.word	0x200020b8
 80013c4:	40006400 	.word	0x40006400

080013c8 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_CAN2_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <MX_CAN2_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 21;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_CAN2_Init+0x64>)
 80013d4:	2215      	movs	r2, #21
 80013d6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_CAN2_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_CAN2_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_CAN2_Init+0x64>)
 80013e6:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80013ea:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_CAN2_Init+0x64>)
 80013ee:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80013f2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <MX_CAN2_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_CAN2_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <MX_CAN2_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_CAN2_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_CAN2_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_CAN2_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_CAN2_Init+0x64>)
 800141a:	f000 ff0f 	bl	800223c <HAL_CAN_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_CAN2_Init+0x60>
		Error_Handler();
 8001424:	f000 fc2a 	bl	8001c7c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200020e0 	.word	0x200020e0
 8001430:	40006800 	.word	0x40006800

08001434 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001450:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001452:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <MX_TIM3_Init+0x98>)
 8001454:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7999;
 8001456:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001458:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800145c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 49999;
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001466:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800146a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <MX_TIM3_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <MX_TIM3_Init+0x94>)
 800147a:	f002 fd75 	bl	8003f68 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x54>
		Error_Handler();
 8001484:	f000 fbfa 	bl	8001c7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <MX_TIM3_Init+0x94>)
 8001496:	f002 ff46 	bl	8004326 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x70>
		Error_Handler();
 80014a0:	f000 fbec 	bl	8001c7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_TIM3_Init+0x94>)
 80014b2:	f003 f96d 	bl	8004790 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80014bc:	f000 fbde 	bl	8001c7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20002108 	.word	0x20002108
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_USART3_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART3_UART_Init+0x4c>)
 8001508:	f003 f9d2 	bl	80048b0 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001512:	f000 fbb3 	bl	8001c7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20002150 	.word	0x20002150
 8001520:	40004800 	.word	0x40004800

08001524 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a3c      	ldr	r2, [pc, #240]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <MX_GPIO_Init+0x110>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <MX_GPIO_Init+0x110>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a35      	ldr	r2, [pc, #212]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a2e      	ldr	r2, [pc, #184]	@ (8001634 <MX_GPIO_Init+0x110>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a27      	ldr	r2, [pc, #156]	@ (8001634 <MX_GPIO_Init+0x110>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <MX_GPIO_Init+0x110>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2101      	movs	r1, #1
 80015ae:	4822      	ldr	r0, [pc, #136]	@ (8001638 <MX_GPIO_Init+0x114>)
 80015b0:	f002 f804 	bl	80035bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC4 PC5 PC6
	 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
 80015b4:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 80015b8:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	481c      	ldr	r0, [pc, #112]	@ (800163c <MX_GPIO_Init+0x118>)
 80015ca:	f001 fe43 	bl	8003254 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4817      	ldr	r0, [pc, #92]	@ (8001640 <MX_GPIO_Init+0x11c>)
 80015e4:	f001 fe36 	bl	8003254 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015e8:	2302      	movs	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4811      	ldr	r0, [pc, #68]	@ (8001640 <MX_GPIO_Init+0x11c>)
 80015fc:	f001 fe2a 	bl	8003254 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	@ (8001638 <MX_GPIO_Init+0x114>)
 8001618:	f001 fe1c 	bl	8003254 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	2006      	movs	r0, #6
 8001622:	f001 fd4e 	bl	80030c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001626:	2006      	movs	r0, #6
 8001628:	f001 fd67 	bl	80030fa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020000 	.word	0x40020000

08001644 <MX_CAN1_Setup>:
	while (i < 8) {
		data_tx[i] = 0x55;
		i++;
	}
}
void MX_CAN1_Setup() {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8001648:	4906      	ldr	r1, [pc, #24]	@ (8001664 <MX_CAN1_Setup+0x20>)
 800164a:	4807      	ldr	r0, [pc, #28]	@ (8001668 <MX_CAN1_Setup+0x24>)
 800164c:	f000 fef2 	bl	8002434 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_CAN1_Setup+0x24>)
 8001652:	f000 ffcf 	bl	80025f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001656:	2102      	movs	r1, #2
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <MX_CAN1_Setup+0x24>)
 800165a:	f001 fa01 	bl	8002a60 <HAL_CAN_ActivateNotification>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200021cc 	.word	0x200021cc
 8001668:	200020b8 	.word	0x200020b8

0800166c <MX_CAN2_Setup>:
void MX_CAN2_Setup() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001670:	4906      	ldr	r1, [pc, #24]	@ (800168c <MX_CAN2_Setup+0x20>)
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <MX_CAN2_Setup+0x24>)
 8001674:	f000 fede 	bl	8002434 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8001678:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_CAN2_Setup+0x24>)
 800167a:	f000 ffbb 	bl	80025f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800167e:	2102      	movs	r1, #2
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <MX_CAN2_Setup+0x24>)
 8001682:	f001 f9ed 	bl	8002a60 <HAL_CAN_ActivateNotification>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20002228 	.word	0x20002228
 8001690:	200020e0 	.word	0x200020e0

08001694 <USART3_SendString>:

void USART3_SendString(uint8_t *ch) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	while (*ch != 0) {
 800169c:	e017      	b.n	80016ce <USART3_SendString+0x3a>
		if (*ch == '\n') {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d109      	bne.n	80016ba <USART3_SendString+0x26>
			// Send carriage return before newline for proper line ending
			unsigned char cr = '\r';
 80016a6:	230d      	movs	r3, #13
 80016a8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart3, &cr, 1, HAL_MAX_DELAY);
 80016aa:	f107 010f 	add.w	r1, r7, #15
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b2:	2201      	movs	r2, #1
 80016b4:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <USART3_SendString+0x4c>)
 80016b6:	f003 f94b 	bl	8004950 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart3, ch, 1, HAL_MAX_DELAY);
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016be:	2201      	movs	r2, #1
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <USART3_SendString+0x4c>)
 80016c4:	f003 f944 	bl	8004950 <HAL_UART_Transmit>
		ch++;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
	while (*ch != 0) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1e3      	bne.n	800169e <USART3_SendString+0xa>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20002150 	.word	0x20002150

080016e4 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t *CAN_Frame) {
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b08d      	sub	sp, #52	@ 0x34
 80016e8:	af08      	add	r7, sp, #32
 80016ea:	4603      	mov	r3, r0
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	81fb      	strh	r3, [r7, #14]
	// Print timestamp
	sprintf(bufsend, "%d ", TimeStamp);
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <PrintCANLog+0x88>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	491e      	ldr	r1, [pc, #120]	@ (8001770 <PrintCANLog+0x8c>)
 80016f8:	481e      	ldr	r0, [pc, #120]	@ (8001774 <PrintCANLog+0x90>)
 80016fa:	f004 f92f 	bl	800595c <siprintf>
	USART3_SendString((uint8_t*) bufsend);
 80016fe:	481d      	ldr	r0, [pc, #116]	@ (8001774 <PrintCANLog+0x90>)
 8001700:	f7ff ffc8 	bl	8001694 <USART3_SendString>
	
	// Format and print the complete CAN message: "XXX: D1 D2 D3 D4 D5 D6 D7 D8 "
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 8001704:	89fa      	ldrh	r2, [r7, #14]
			CANID, 
			CAN_Frame[0], CAN_Frame[1], CAN_Frame[2], CAN_Frame[3],
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 800170a:	469c      	mov	ip, r3
			CAN_Frame[0], CAN_Frame[1], CAN_Frame[2], CAN_Frame[3],
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 8001712:	4619      	mov	r1, r3
			CAN_Frame[0], CAN_Frame[1], CAN_Frame[2], CAN_Frame[3],
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3302      	adds	r3, #2
 8001718:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 800171a:	4618      	mov	r0, r3
			CAN_Frame[0], CAN_Frame[1], CAN_Frame[2], CAN_Frame[3],
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3303      	adds	r3, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 8001722:	461c      	mov	r4, r3
			CAN_Frame[4], CAN_Frame[5], CAN_Frame[6], CAN_Frame[7]);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3304      	adds	r3, #4
 8001728:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 800172a:	461d      	mov	r5, r3
			CAN_Frame[4], CAN_Frame[5], CAN_Frame[6], CAN_Frame[7]);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3305      	adds	r3, #5
 8001730:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 8001732:	461e      	mov	r6, r3
			CAN_Frame[4], CAN_Frame[5], CAN_Frame[6], CAN_Frame[7]);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3306      	adds	r3, #6
 8001738:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 800173a:	607b      	str	r3, [r7, #4]
			CAN_Frame[4], CAN_Frame[5], CAN_Frame[6], CAN_Frame[7]);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3307      	adds	r3, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
	sprintf(bufsend, "0x%03X: %02X %02X %02X %02X %02X %02X %02X %02X \n", 
 8001742:	9306      	str	r3, [sp, #24]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	9305      	str	r3, [sp, #20]
 8001748:	9604      	str	r6, [sp, #16]
 800174a:	9503      	str	r5, [sp, #12]
 800174c:	9402      	str	r4, [sp, #8]
 800174e:	9001      	str	r0, [sp, #4]
 8001750:	9100      	str	r1, [sp, #0]
 8001752:	4663      	mov	r3, ip
 8001754:	4908      	ldr	r1, [pc, #32]	@ (8001778 <PrintCANLog+0x94>)
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <PrintCANLog+0x90>)
 8001758:	f004 f900 	bl	800595c <siprintf>
	USART3_SendString((unsigned char*) bufsend);
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <PrintCANLog+0x90>)
 800175e:	f7ff ff99 	bl	8001694 <USART3_SendString>
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	bf00      	nop
 800176c:	2000328c 	.word	0x2000328c
 8001770:	080062ec 	.word	0x080062ec
 8001774:	20000008 	.word	0x20000008
 8001778:	080062f0 	.word	0x080062f0

0800177c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_UART_RxCpltCallback+0x30>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_UART_RxCpltCallback+0x34>)
 800178c:	7819      	ldrb	r1, [r3, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_UART_RxCpltCallback+0x38>)
 8001790:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_UART_RxCpltCallback+0x30>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <HAL_UART_RxCpltCallback+0x30>)
 800179c:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20002258 	.word	0x20002258
 80017b0:	2000325c 	.word	0x2000325c
 80017b4:	2000225c 	.word	0x2000225c

080017b8 <delay>:
void delay(uint16_t delay) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd15 	bl	80021f4 <HAL_Delay>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <calculate_key>:
void calculate_key(uint8_t *input, uint8_t *output) {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	output[0] = input[0] ^ input[1];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4053      	eors	r3, r2
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	701a      	strb	r2, [r3, #0]
	output[1] = input[1] + input[2];
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	7819      	ldrb	r1, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3302      	adds	r3, #2
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	440a      	add	r2, r1
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
	output[2] = input[2] ^ input[3];
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3302      	adds	r3, #2
 8001808:	7819      	ldrb	r1, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3303      	adds	r3, #3
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3302      	adds	r3, #2
 8001814:	404a      	eors	r2, r1
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]
	output[3] = input[3] + input[0];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3303      	adds	r3, #3
 800181e:	7819      	ldrb	r1, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3303      	adds	r3, #3
 8001828:	440a      	add	r2, r1
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
	output[4] = input[4] & 0xF0;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3304      	adds	r3, #4
 8001838:	f022 020f 	bic.w	r2, r2, #15
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]
	output[5] = input[5] & 0x0F;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3305      	adds	r3, #5
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3305      	adds	r3, #5
 800184a:	f002 020f 	and.w	r2, r2, #15
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <send_uds_request_via_can1>:

// Function to send UDS request via CAN1 with proper ISO-TP framing
void send_uds_request_via_can1(uint8_t *uds_data, uint16_t length) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a0      	sub	sp, #128	@ 0x80
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
	if (length == 0 || length > 4095) {
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <send_uds_request_via_can1+0x1a>
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001878:	d303      	bcc.n	8001882 <send_uds_request_via_can1+0x22>
		USART3_SendString((uint8_t*) "Invalid UDS data length\n");
 800187a:	4861      	ldr	r0, [pc, #388]	@ (8001a00 <send_uds_request_via_can1+0x1a0>)
 800187c:	f7ff ff0a 	bl	8001694 <USART3_SendString>
 8001880:	e0bb      	b.n	80019fa <send_uds_request_via_can1+0x19a>
		USART3_SendString((uint8_t*) debug_msg);
	}
	USART3_SendString((uint8_t*) "\n");
	*/
	
	if (length <= 7) {
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d81e      	bhi.n	80018c6 <send_uds_request_via_can1+0x66>
		// Single Frame: First byte = 0x0L (L = length)
		CAN1_DATA_TX[0] = 0x00 | length; // Single Frame PCI + length
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b5d      	ldr	r3, [pc, #372]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 800188e:	701a      	strb	r2, [r3, #0]
		memcpy(&CAN1_DATA_TX[1], uds_data, length);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	461a      	mov	r2, r3
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	485c      	ldr	r0, [pc, #368]	@ (8001a08 <send_uds_request_via_can1+0x1a8>)
 8001898:	f004 f8b6 	bl	8005a08 <memcpy>
		
		// Pad remaining bytes
		for (int i = length + 1; i < 8; i++) {
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	3301      	adds	r3, #1
 80018a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018a2:	e007      	b.n	80018b4 <send_uds_request_via_can1+0x54>
			CAN1_DATA_TX[i] = 0x55;
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 80018a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018a8:	4413      	add	r3, r2
 80018aa:	2255      	movs	r2, #85	@ 0x55
 80018ac:	701a      	strb	r2, [r3, #0]
		for (int i = length + 1; i < 8; i++) {
 80018ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018b0:	3301      	adds	r3, #1
 80018b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	ddf4      	ble.n	80018a4 <send_uds_request_via_can1+0x44>
		
		//sprintf(debug_msg, "Sending Single Frame: ");
		//USART3_SendString((uint8_t*) debug_msg);
		//PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);

		USART3_SendString((uint8_t*) "Request: ");
 80018ba:	4854      	ldr	r0, [pc, #336]	@ (8001a0c <send_uds_request_via_can1+0x1ac>)
 80018bc:	f7ff feea 	bl	8001694 <USART3_SendString>
		CAN1_Send();
 80018c0:	f000 f91e 	bl	8001b00 <CAN1_Send>
 80018c4:	e099      	b.n	80019fa <send_uds_request_via_can1+0x19a>
	} else {
		// Multi-Frame: First Frame + Consecutive Frames
		// First Frame: 1L LL DD DD DD DD DD DD (L LL = 12-bit length)
		CAN1_DATA_TX[0] = 0x10 | ((length >> 8) & 0x0F); // FF PCI + high nibble of length
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 80018de:	701a      	strb	r2, [r3, #0]
		CAN1_DATA_TX[1] = length & 0xFF; // Low byte of length
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 80018e6:	705a      	strb	r2, [r3, #1]
		memcpy(&CAN1_DATA_TX[2], uds_data, 6); // First 6 bytes of data
 80018e8:	2206      	movs	r2, #6
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4848      	ldr	r0, [pc, #288]	@ (8001a10 <send_uds_request_via_can1+0x1b0>)
 80018ee:	f004 f88b 	bl	8005a08 <memcpy>
		
		sprintf(debug_msg, "Sending First Frame: ");
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4947      	ldr	r1, [pc, #284]	@ (8001a14 <send_uds_request_via_can1+0x1b4>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 f82f 	bl	800595c <siprintf>
		USART3_SendString((uint8_t*) debug_msg);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fec6 	bl	8001694 <USART3_SendString>
		PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8001908:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <send_uds_request_via_can1+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	493d      	ldr	r1, [pc, #244]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fee7 	bl	80016e4 <PrintCANLog>
		
		CAN1_Send();
 8001916:	f000 f8f3 	bl	8001b00 <CAN1_Send>
		
		// Wait for Flow Control (in a real implementation, this should be event-driven)
		delay(100);
 800191a:	2064      	movs	r0, #100	@ 0x64
 800191c:	f7ff ff4c 	bl	80017b8 <delay>
		
		// Send Consecutive Frames
		uint16_t sent_bytes = 6;
 8001920:	2306      	movs	r3, #6
 8001922:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
		uint8_t sequence_number = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		
		while (sent_bytes < length) {
 800192c:	e060      	b.n	80019f0 <send_uds_request_via_can1+0x190>
			uint8_t remaining = length - sent_bytes;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001936:	b2db      	uxtb	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			uint8_t to_send = (remaining > 7) ? 7 : remaining;
 800193e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001942:	2b07      	cmp	r3, #7
 8001944:	bf28      	it	cs
 8001946:	2307      	movcs	r3, #7
 8001948:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
			
			CAN1_DATA_TX[0] = 0x20 | (sequence_number & 0x0F); // CF PCI + sequence number
 800194c:	f997 3079 	ldrsb.w	r3, [r7, #121]	@ 0x79
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	b25b      	sxtb	r3, r3
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 8001960:	701a      	strb	r2, [r3, #0]
			memcpy(&CAN1_DATA_TX[1], &uds_data[sent_bytes], to_send);
 8001962:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 800196e:	4619      	mov	r1, r3
 8001970:	4825      	ldr	r0, [pc, #148]	@ (8001a08 <send_uds_request_via_can1+0x1a8>)
 8001972:	f004 f849 	bl	8005a08 <memcpy>
			
			// Pad remaining bytes
			for (int i = to_send + 1; i < 8; i++) {
 8001976:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800197a:	3301      	adds	r3, #1
 800197c:	677b      	str	r3, [r7, #116]	@ 0x74
 800197e:	e007      	b.n	8001990 <send_uds_request_via_can1+0x130>
				CAN1_DATA_TX[i] = 0x55;
 8001980:	4a20      	ldr	r2, [pc, #128]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 8001982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001984:	4413      	add	r3, r2
 8001986:	2255      	movs	r2, #85	@ 0x55
 8001988:	701a      	strb	r2, [r3, #0]
			for (int i = to_send + 1; i < 8; i++) {
 800198a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800198c:	3301      	adds	r3, #1
 800198e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001992:	2b07      	cmp	r3, #7
 8001994:	ddf4      	ble.n	8001980 <send_uds_request_via_can1+0x120>
			}
			
			sprintf(debug_msg, "Sending Consecutive Frame %d: ", sequence_number);
 8001996:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	491f      	ldr	r1, [pc, #124]	@ (8001a1c <send_uds_request_via_can1+0x1bc>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 ffdb 	bl	800595c <siprintf>
			USART3_SendString((uint8_t*) debug_msg);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe72 	bl	8001694 <USART3_SendString>
			PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <send_uds_request_via_can1+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4913      	ldr	r1, [pc, #76]	@ (8001a04 <send_uds_request_via_can1+0x1a4>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe93 	bl	80016e4 <PrintCANLog>
			
			CAN1_Send();
 80019be:	f000 f89f 	bl	8001b00 <CAN1_Send>
			
			sent_bytes += to_send;
 80019c2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80019cc:	4413      	add	r3, r2
 80019ce:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
			sequence_number++;
 80019d2:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80019d6:	3301      	adds	r3, #1
 80019d8:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			if (sequence_number > 15) sequence_number = 0; // Wrap around
 80019dc:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d902      	bls.n	80019ea <send_uds_request_via_can1+0x18a>
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
			
			delay(50); // Small delay between frames
 80019ea:	2032      	movs	r0, #50	@ 0x32
 80019ec:	f7ff fee4 	bl	80017b8 <delay>
		while (sent_bytes < length) {
 80019f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d399      	bcc.n	800192e <send_uds_request_via_can1+0xce>
		}
	}
}
 80019fa:	3780      	adds	r7, #128	@ 0x80
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	08006324 	.word	0x08006324
 8001a04:	20003268 	.word	0x20003268
 8001a08:	20003269 	.word	0x20003269
 8001a0c:	08006340 	.word	0x08006340
 8001a10:	2000326a 	.word	0x2000326a
 8001a14:	0800634c 	.word	0x0800634c
 8001a18:	20002198 	.word	0x20002198
 8001a1c:	08006364 	.word	0x08006364

08001a20 <compare_key>:
uint8_t compare_key(uint8_t *array1, uint8_t *array2, uint8_t length) {
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
 8001a32:	e00e      	b.n	8001a52 <compare_key+0x32>
		if (array1[i] != array2[i]) {
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	440b      	add	r3, r1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <compare_key+0x2c>
			return 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e007      	b.n	8001a5c <compare_key+0x3c>
	for (uint8_t i = 0; i < length; i++) {
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
 8001a52:	7dfa      	ldrb	r2, [r7, #23]
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3ec      	bcc.n	8001a34 <compare_key+0x14>
		}
	}
	return 1;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	if (hcan == &hcan1) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d11c      	bne.n	8001ab2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		ret = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1_pHeaderRx,
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fecc 	bl	800281c <HAL_CAN_GetRxMessage>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
				CAN1_DATA_RX);
		if (ret != HAL_OK) {
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
			Error_Handler();
 8001a8e:	f000 f8f5 	bl	8001c7c <Error_Handler>
		}
		
		// Process CAN1 frames immediately in interrupt
		uint8_t pci = CAN1_DATA_RX[0] & 0xF0;
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f023 030f 	bic.w	r3, r3, #15
 8001a9a:	73bb      	strb	r3, [r7, #14]
		if (pci == ISO_TP_PCI_FC) {
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	2b30      	cmp	r3, #48	@ 0x30
 8001aa0:	d103      	bne.n	8001aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			// Process Flow Control from ECU
			iso_tp_process_rx(CAN1_DATA_RX);
 8001aa2:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001aa4:	f7ff f854 	bl	8000b50 <iso_tp_process_rx>
		} else {
			// Set flag for main loop to handle response display
			check = 1;
		}
		return;
 8001aa8:	e018      	b.n	8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			check = 1;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
		return;
 8001ab0:	e014      	b.n	8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
	}
	if (hcan == &hcan2) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8001af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d110      	bne.n	8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
		ret = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN2_pHeaderRx,
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001abc:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 feab 	bl	800281c <HAL_CAN_GetRxMessage>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
				CAN2_DATA_RX);
		if (ret != HAL_OK) {
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
			Error_Handler();
 8001ad0:	f000 f8d4 	bl	8001c7c <Error_Handler>
		}
		
		// Process CAN2 frames immediately in interrupt
		iso_tp_process_rx(CAN2_DATA_RX);
 8001ad4:	4808      	ldr	r0, [pc, #32]	@ (8001af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001ad6:	f7ff f83b 	bl	8000b50 <iso_tp_process_rx>
		return;
 8001ada:	bf00      	nop
	}
}
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200020b8 	.word	0x200020b8
 8001ae8:	20003270 	.word	0x20003270
 8001aec:	200021b0 	.word	0x200021b0
 8001af0:	20003288 	.word	0x20003288
 8001af4:	200020e0 	.word	0x200020e0
 8001af8:	20003280 	.word	0x20003280
 8001afc:	2000220c 	.word	0x2000220c

08001b00 <CAN1_Send>:

void CAN1_Send() {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <CAN1_Send+0x2c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4909      	ldr	r1, [pc, #36]	@ (8001b30 <CAN1_Send+0x30>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fde9 	bl	80016e4 <PrintCANLog>
	if (HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX,
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <CAN1_Send+0x34>)
 8001b14:	4a06      	ldr	r2, [pc, #24]	@ (8001b30 <CAN1_Send+0x30>)
 8001b16:	4905      	ldr	r1, [pc, #20]	@ (8001b2c <CAN1_Send+0x2c>)
 8001b18:	4807      	ldr	r0, [pc, #28]	@ (8001b38 <CAN1_Send+0x38>)
 8001b1a:	f000 fdaf 	bl	800267c <HAL_CAN_AddTxMessage>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <CAN1_Send+0x28>
			&CAN1_pTxMailbox) != HAL_OK) {
		Error_Handler();
 8001b24:	f000 f8aa 	bl	8001c7c <Error_Handler>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20002198 	.word	0x20002198
 8001b30:	20003268 	.word	0x20003268
 8001b34:	20002250 	.word	0x20002250
 8001b38:	200020b8 	.word	0x200020b8

08001b3c <CAN1CommSetup>:

void CAN1CommSetup() {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	CAN1_pHeader.IDE = CAN_ID_STD;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <CAN1CommSetup+0x6c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
	CAN1_pHeader.StdId = 0x712;
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <CAN1CommSetup+0x6c>)
 8001b48:	f240 7212 	movw	r2, #1810	@ 0x712
 8001b4c:	601a      	str	r2, [r3, #0]
	CAN1_pHeader.RTR = CAN_RTR_DATA;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <CAN1CommSetup+0x6c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
	CAN1_pHeader.DLC = 8;
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <CAN1CommSetup+0x6c>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	621a      	str	r2, [r3, #32]
	CAN1_sFilterConfig.FilterBank = 14;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b62:	220e      	movs	r2, #14
 8001b64:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterIdHigh = 0x7A2 << 5;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b6e:	f24f 4240 	movw	r2, #62528	@ 0xf440
 8001b72:	601a      	str	r2, [r3, #0]
	CAN1_sFilterConfig.FilterIdLow = 0;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x7A2 << 5;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b7c:	f24f 4240 	movw	r2, #62528	@ 0xf440
 8001b80:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.SlaveStartFilterBank = 16;
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b96:	2210      	movs	r2, #16
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8001b9a:	4904      	ldr	r1, [pc, #16]	@ (8001bac <CAN1CommSetup+0x70>)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <CAN1CommSetup+0x74>)
 8001b9e:	f000 fc49 	bl	8002434 <HAL_CAN_ConfigFilter>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20002198 	.word	0x20002198
 8001bac:	200021cc 	.word	0x200021cc
 8001bb0:	200020b8 	.word	0x200020b8

08001bb4 <CAN2CommSetup>:
			&CAN2_pTxMailbox) != HAL_OK) {
		Error_Handler();
	}
}

void CAN2CommSetup() {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	CAN2_pHeader.IDE = CAN_ID_STD;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <CAN2CommSetup+0x68>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
	CAN2_pHeader.StdId = 0x7A2;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <CAN2CommSetup+0x68>)
 8001bc0:	f240 72a2 	movw	r2, #1954	@ 0x7a2
 8001bc4:	601a      	str	r2, [r3, #0]
	CAN2_pHeader.RTR = CAN_RTR_DATA;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <CAN2CommSetup+0x68>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
	CAN2_pHeader.DLC = 8;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <CAN2CommSetup+0x68>)
 8001bce:	2208      	movs	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	621a      	str	r2, [r3, #32]
	CAN2_sFilterConfig.FilterBank = 18;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001bda:	2212      	movs	r2, #18
 8001bdc:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterIdHigh = CAN1_pHeader.StdId << 5;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <CAN2CommSetup+0x70>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	015b      	lsls	r3, r3, #5
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001bec:	6013      	str	r3, [r2, #0]
	CAN2_sFilterConfig.FilterIdLow = 0;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = CAN1_pHeader.StdId << 5;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <CAN2CommSetup+0x70>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001bfc:	6093      	str	r3, [r2, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001c10:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <CAN2CommSetup+0x6c>)
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <CAN2CommSetup+0x74>)
 8001c14:	f000 fc0e 	bl	8002434 <HAL_CAN_ConfigFilter>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200021f4 	.word	0x200021f4
 8001c20:	20002228 	.word	0x20002228
 8001c24:	20002198 	.word	0x20002198
 8001c28:	200020e0 	.word	0x200020e0

08001c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d114      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x3a>
		if (SecurityUnlocked == 0)
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x38>
			return;
		else {
			HAL_TIM_Base_Stop_IT(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f002 fa4e 	bl	80040e8 <HAL_TIM_Base_Stop_IT>
			SecurityUnlocked = 0;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2101      	movs	r1, #1
 8001c56:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c58:	f001 fcb0 	bl	80035bc <HAL_GPIO_WritePin>
			USART3_SendString((uint8_t*) "Session Locked\n");
 8001c5c:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c5e:	f7ff fd19 	bl	8001694 <USART3_SendString>
 8001c62:	e000      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x3a>
			return;
 8001c64:	bf00      	nop
		}
	}
}
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20002108 	.word	0x20002108
 8001c70:	20003290 	.word	0x20003290
 8001c74:	40020400 	.word	0x40020400
 8001c78:	08006384 	.word	0x08006384

08001c7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	@ 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e20 <HAL_CAN_MspInit+0x148>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d13e      	bne.n	8001d78 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a48      	ldr	r2, [pc, #288]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001d02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d04:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10d      	bne.n	8001d28 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	4b45      	ldr	r3, [pc, #276]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a44      	ldr	r2, [pc, #272]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1c:	4b42      	ldr	r3, [pc, #264]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d56:	2309      	movs	r3, #9
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4832      	ldr	r0, [pc, #200]	@ (8001e2c <HAL_CAN_MspInit+0x154>)
 8001d62:	f001 fa77 	bl	8003254 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2102      	movs	r1, #2
 8001d6a:	2014      	movs	r0, #20
 8001d6c:	f001 f9a9 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d70:	2014      	movs	r0, #20
 8001d72:	f001 f9c2 	bl	80030fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d76:	e04f      	b.n	8001e18 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e30 <HAL_CAN_MspInit+0x158>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d14a      	bne.n	8001e18 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	4a27      	ldr	r2, [pc, #156]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d92:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001da6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001da8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <HAL_CAN_MspInit+0x14c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10d      	bne.n	8001dcc <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001dba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_CAN_MspInit+0x150>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001de8:	2360      	movs	r3, #96	@ 0x60
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001df8:	2309      	movs	r3, #9
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <HAL_CAN_MspInit+0x15c>)
 8001e04:	f001 fa26 	bl	8003254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	2040      	movs	r0, #64	@ 0x40
 8001e0e:	f001 f958 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e12:	2040      	movs	r0, #64	@ 0x40
 8001e14:	f001 f971 	bl	80030fa <HAL_NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	@ 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40006400 	.word	0x40006400
 8001e24:	2000329c 	.word	0x2000329c
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40006800 	.word	0x40006800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d115      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	201d      	movs	r0, #29
 8001e6c:	f001 f929 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e70:	201d      	movs	r0, #29
 8001e72:	f001 f942 	bl	80030fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_UART_MspInit+0x94>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d134      	bne.n	8001f14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_UART_MspInit+0x98>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4809      	ldr	r0, [pc, #36]	@ (8001f24 <HAL_UART_MspInit+0x9c>)
 8001f00:	f001 f9a8 	bl	8003254 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2101      	movs	r1, #1
 8001f08:	2027      	movs	r0, #39	@ 0x27
 8001f0a:	f001 f8da 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f0e:	2027      	movs	r0, #39	@ 0x27
 8001f10:	f001 f8f3 	bl	80030fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	@ 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40004800 	.word	0x40004800
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <NMI_Handler+0x4>

08001f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <MemManage_Handler+0x4>

08001f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f918 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <SysTick_Handler+0x18>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a02      	ldr	r2, [pc, #8]	@ (8001f94 <SysTick_Handler+0x18>)
 8001f8c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000328c 	.word	0x2000328c

08001f98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f001 fb27 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <CAN1_RX0_IRQHandler+0x1c>)
 8001fae:	f000 fd7d 	bl	8002aac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <CAN1_RX0_IRQHandler+0x20>)
 8001fb4:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <CAN1_RX0_IRQHandler+0x24>)
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <CAN1_RX0_IRQHandler+0x1c>)
 8001fba:	f000 fc2f 	bl	800281c <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200020b8 	.word	0x200020b8
 8001fc8:	20003270 	.word	0x20003270
 8001fcc:	200021b0 	.word	0x200021b0

08001fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <TIM3_IRQHandler+0x10>)
 8001fd6:	f002 f8b6 	bl	8004146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20002108 	.word	0x20002108

08001fe4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <USART3_IRQHandler+0x18>)
 8001fea:	f002 fd61 	bl	8004ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <USART3_IRQHandler+0x1c>)
 8001ff2:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <USART3_IRQHandler+0x18>)
 8001ff4:	f002 fd37 	bl	8004a66 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20002150 	.word	0x20002150
 8002000:	2000325c 	.word	0x2000325c

08002004 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <CAN2_RX0_IRQHandler+0x1c>)
 800200a:	f000 fd4f 	bl	8002aac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <CAN2_RX0_IRQHandler+0x20>)
 8002010:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <CAN2_RX0_IRQHandler+0x24>)
 8002012:	2100      	movs	r1, #0
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <CAN2_RX0_IRQHandler+0x1c>)
 8002016:	f000 fc01 	bl	800281c <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200020e0 	.word	0x200020e0
 8002024:	20003280 	.word	0x20003280
 8002028:	2000220c 	.word	0x2000220c

0800202c <_sbrk>:
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
 800205c:	f003 fca8 	bl	80059b0 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	200032a0 	.word	0x200032a0
 8002094:	200033f0 	.word	0x200033f0

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopFillZerobss+0x12>
 80020c0:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x16>)
 80020c2:	490e      	ldr	r1, [pc, #56]	@ (80020fc <LoopFillZerobss+0x1a>)
 80020c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002100 <LoopFillZerobss+0x1e>)
 80020c6:	2300      	movs	r3, #0
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:
 80020ca:	58d4      	ldr	r4, [r2, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:
 80020d0:	18c4      	adds	r4, r0, r3
 80020d2:	428c      	cmp	r4, r1
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <LoopFillZerobss+0x22>)
 80020d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002108 <LoopFillZerobss+0x26>)
 80020da:	2300      	movs	r3, #0
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:
 80020e2:	42a2      	cmp	r2, r4
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>
 80020e6:	f7ff ffd7 	bl	8002098 <SystemInit>
 80020ea:	f003 fc67 	bl	80059bc <__libc_init_array>
 80020ee:	f7ff f835 	bl	800115c <main>
 80020f2:	4770      	bx	lr
 80020f4:	20020000 	.word	0x20020000
 80020f8:	20000000 	.word	0x20000000
 80020fc:	2000008c 	.word	0x2000008c
 8002100:	080063f0 	.word	0x080063f0
 8002104:	2000008c 	.word	0x2000008c
 8002108:	200033f0 	.word	0x200033f0

0800210c <ADC_IRQHandler>:
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 ffb7 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fda0 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ffcf 	bl	8003116 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002190:	f000 ff97 	bl	80030c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000030 	.word	0x20000030
 80021ac:	20000038 	.word	0x20000038
 80021b0:	20000034 	.word	0x20000034

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000038 	.word	0x20000038
 80021d8:	200032a4 	.word	0x200032a4

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200032a4 	.word	0x200032a4

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000038 	.word	0x20000038

0800223c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0ed      	b.n	800242a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fd3c 	bl	8001cd8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7ff ffb4 	bl	80021dc <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002276:	e012      	b.n	800229e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002278:	f7ff ffb0 	bl	80021dc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d90b      	bls.n	800229e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2205      	movs	r2, #5
 8002296:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0c5      	b.n	800242a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0e5      	beq.n	8002278 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0202 	bic.w	r2, r2, #2
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff ff8e 	bl	80021dc <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022c2:	e012      	b.n	80022ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c4:	f7ff ff8a 	bl	80021dc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d90b      	bls.n	80022ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e09f      	b.n	800242a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e5      	bne.n	80022c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e007      	b.n	8002322 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e5b      	ldrb	r3, [r3, #25]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e007      	b.n	800234c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800234a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e9b      	ldrb	r3, [r3, #26]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d108      	bne.n	8002366 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0220 	orr.w	r2, r2, #32
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e007      	b.n	8002376 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0220 	bic.w	r2, r2, #32
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7edb      	ldrb	r3, [r3, #27]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e007      	b.n	80023a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0210 	orr.w	r2, r2, #16
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7f1b      	ldrb	r3, [r3, #28]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d108      	bne.n	80023ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e007      	b.n	80023ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7f5b      	ldrb	r3, [r3, #29]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e007      	b.n	80023f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	ea42 0103 	orr.w	r1, r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d003      	beq.n	800245a <HAL_CAN_ConfigFilter+0x26>
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f040 80be 	bne.w	80025d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800245a:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800245c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002474:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	431a      	orrs	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2201      	movs	r2, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	401a      	ands	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d123      	bne.n	8002504 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3248      	adds	r2, #72	@ 0x48
 80024e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024fa:	6979      	ldr	r1, [r7, #20]
 80024fc:	3348      	adds	r3, #72	@ 0x48
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d122      	bne.n	8002552 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800252c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3248      	adds	r2, #72	@ 0x48
 8002532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	3348      	adds	r3, #72	@ 0x48
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800256c:	e007      	b.n	800257e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002598:	e007      	b.n	80025aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025c8:	f023 0201 	bic.w	r2, r3, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e006      	b.n	80025e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40006400 	.word	0x40006400

080025f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d12e      	bne.n	8002666 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fddc 	bl	80021dc <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002626:	e012      	b.n	800264e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002628:	f7ff fdd8 	bl	80021dc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d90b      	bls.n	800264e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e012      	b.n	8002674 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e006      	b.n	8002674 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	@ 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002690:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d003      	beq.n	80026a8 <HAL_CAN_AddTxMessage+0x2c>
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	f040 80ad 	bne.w	8002802 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8095 	beq.w	80027f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026d2:	2201      	movs	r2, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	6809      	ldr	r1, [r1, #0]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3318      	adds	r3, #24
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	440b      	add	r3, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e00f      	b.n	8002720 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800270a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002714:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3318      	adds	r3, #24
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3318      	adds	r3, #24
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	440b      	add	r3, r1
 8002730:	3304      	adds	r3, #4
 8002732:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	7d1b      	ldrb	r3, [r3, #20]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d111      	bne.n	8002760 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3318      	adds	r3, #24
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	6811      	ldr	r1, [r2, #0]
 8002750:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3318      	adds	r3, #24
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	3304      	adds	r3, #4
 800275e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3307      	adds	r3, #7
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	061a      	lsls	r2, r3, #24
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3306      	adds	r3, #6
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3305      	adds	r3, #5
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4313      	orrs	r3, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	3204      	adds	r2, #4
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4610      	mov	r0, r2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6811      	ldr	r1, [r2, #0]
 8002788:	ea43 0200 	orr.w	r2, r3, r0
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	440b      	add	r3, r1
 8002792:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002796:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3303      	adds	r3, #3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	061a      	lsls	r2, r3, #24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3302      	adds	r3, #2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3301      	adds	r3, #1
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	7812      	ldrb	r2, [r2, #0]
 80027b8:	4610      	mov	r0, r2
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	6811      	ldr	r1, [r2, #0]
 80027be:	ea43 0200 	orr.w	r2, r3, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80027cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3318      	adds	r3, #24
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4413      	add	r3, r2
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6811      	ldr	r1, [r2, #0]
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3318      	adds	r3, #24
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	440b      	add	r3, r1
 80027ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e00e      	b.n	8002810 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e006      	b.n	8002810 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3724      	adds	r7, #36	@ 0x24
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002830:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d003      	beq.n	8002840 <HAL_CAN_GetRxMessage+0x24>
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 8103 	bne.w	8002a46 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0f7      	b.n	8002a54 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0e8      	b.n	8002a54 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	331b      	adds	r3, #27
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0204 	and.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10c      	bne.n	80028ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	331b      	adds	r3, #27
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e00b      	b.n	80028d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	331b      	adds	r3, #27
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	331b      	adds	r3, #27
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0202 	and.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	331b      	adds	r3, #27
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2208      	movs	r2, #8
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	e00b      	b.n	8002920 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	331b      	adds	r3, #27
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	331b      	adds	r3, #27
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	331b      	adds	r3, #27
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0a1a      	lsrs	r2, r3, #8
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	4413      	add	r3, r2
 800298a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0c1a      	lsrs	r2, r3, #16
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	3302      	adds	r3, #2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e1a      	lsrs	r2, r3, #24
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	3303      	adds	r3, #3
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	3304      	adds	r3, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0a1a      	lsrs	r2, r3, #8
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	3305      	adds	r3, #5
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0c1a      	lsrs	r2, r3, #16
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	3306      	adds	r3, #6
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e1a      	lsrs	r2, r3, #24
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3307      	adds	r3, #7
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d108      	bne.n	8002a32 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	e007      	b.n	8002a42 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e006      	b.n	8002a54 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <HAL_CAN_ActivateNotification+0x1e>
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d109      	bne.n	8002a92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6959      	ldr	r1, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e006      	b.n	8002aa0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07c      	beq.n	8002bec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d023      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f983 	bl	8002e1a <HAL_CAN_TxMailbox0CompleteCallback>
 8002b14:	e016      	b.n	8002b44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	e00c      	b.n	8002b44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	e002      	b.n	8002b44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f989 	bl	8002e56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f963 	bl	8002e2e <HAL_CAN_TxMailbox1CompleteCallback>
 8002b68:	e016      	b.n	8002b98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7c:	e00c      	b.n	8002b98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b90:	e002      	b.n	8002b98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f969 	bl	8002e6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002baa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f943 	bl	8002e42 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bbc:	e016      	b.n	8002bec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd0:	e00c      	b.n	8002bec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be4:	e002      	b.n	8002bec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f949 	bl	8002e7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f930 	bl	8002e92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe ff0c 	bl	8001a68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2210      	movs	r2, #16
 8002c72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f912 	bl	8002eba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8f9 	bl	8002ea6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8fc 	bl	8002ece <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8f5 	bl	8002ee2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d07b      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d072      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d043      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03e      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7a:	2b60      	cmp	r3, #96	@ 0x60
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x32a>
 8002d7e:	2b60      	cmp	r3, #96	@ 0x60
 8002d80:	d82e      	bhi.n	8002de0 <HAL_CAN_IRQHandler+0x334>
 8002d82:	2b50      	cmp	r3, #80	@ 0x50
 8002d84:	d022      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x320>
 8002d86:	2b50      	cmp	r3, #80	@ 0x50
 8002d88:	d82a      	bhi.n	8002de0 <HAL_CAN_IRQHandler+0x334>
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d019      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x316>
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d826      	bhi.n	8002de0 <HAL_CAN_IRQHandler+0x334>
 8002d92:	2b30      	cmp	r3, #48	@ 0x30
 8002d94:	d010      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x30c>
 8002d96:	2b30      	cmp	r3, #48	@ 0x30
 8002d98:	d822      	bhi.n	8002de0 <HAL_CAN_IRQHandler+0x334>
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d002      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x2f8>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d005      	beq.n	8002dae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002da2:	e01d      	b.n	8002de0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dac:	e019      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002db6:	e014      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dc0:	e00f      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dca:	e00a      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dd4:	e005      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dde:	e000      	b.n	8002de2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002de0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002df0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2204      	movs	r2, #4
 8002df8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f872 	bl	8002ef6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	60d3      	str	r3, [r2, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0b      	blt.n	8002f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <__NVIC_EnableIRQ+0x38>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	@ (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	@ (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	@ 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003078:	d301      	bcc.n	800307e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307a:	2301      	movs	r3, #1
 800307c:	e00f      	b.n	800309e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307e:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <SysTick_Config+0x40>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003086:	210f      	movs	r1, #15
 8003088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800308c:	f7ff ff8e 	bl	8002fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <SysTick_Config+0x40>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <SysTick_Config+0x40>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff29 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d4:	f7ff ff3e 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 80030d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff8e 	bl	8003000 <NVIC_EncodePriority>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff5d 	bl	8002fac <__NVIC_SetPriority>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff31 	bl	8002f70 <__NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffa2 	bl	8003068 <SysTick_Config>
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff f84e 	bl	80021dc <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d008      	beq.n	8003160 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e052      	b.n	8003206 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0216 	bic.w	r2, r2, #22
 800316e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800317e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <HAL_DMA_Abort+0x62>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0208 	bic.w	r2, r2, #8
 800319e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b0:	e013      	b.n	80031da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b2:	f7ff f813 	bl	80021dc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d90c      	bls.n	80031da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e015      	b.n	8003206 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e4      	bne.n	80031b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	223f      	movs	r2, #63	@ 0x3f
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d004      	beq.n	800322c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e00c      	b.n	8003246 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2205      	movs	r2, #5
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	@ 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e16b      	b.n	8003548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 815a 	bne.w	8003542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80b4 	beq.w	8003542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b60      	ldr	r3, [pc, #384]	@ (8003560 <HAL_GPIO_Init+0x30c>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003560 <HAL_GPIO_Init+0x30c>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003560 <HAL_GPIO_Init+0x30c>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003564 <HAL_GPIO_Init+0x310>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <HAL_GPIO_Init+0x314>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <HAL_GPIO_Init+0x226>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a51      	ldr	r2, [pc, #324]	@ (800356c <HAL_GPIO_Init+0x318>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d025      	beq.n	8003476 <HAL_GPIO_Init+0x222>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a50      	ldr	r2, [pc, #320]	@ (8003570 <HAL_GPIO_Init+0x31c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <HAL_GPIO_Init+0x21e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4f      	ldr	r2, [pc, #316]	@ (8003574 <HAL_GPIO_Init+0x320>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x21a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4e      	ldr	r2, [pc, #312]	@ (8003578 <HAL_GPIO_Init+0x324>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x216>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4d      	ldr	r2, [pc, #308]	@ (800357c <HAL_GPIO_Init+0x328>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x212>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4c      	ldr	r2, [pc, #304]	@ (8003580 <HAL_GPIO_Init+0x32c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x20e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4b      	ldr	r2, [pc, #300]	@ (8003584 <HAL_GPIO_Init+0x330>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x20a>
 800345a:	2307      	movs	r3, #7
 800345c:	e00e      	b.n	800347c <HAL_GPIO_Init+0x228>
 800345e:	2308      	movs	r3, #8
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x228>
 8003462:	2306      	movs	r3, #6
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x228>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x228>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x228>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x228>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x228>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x228>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	@ (8003564 <HAL_GPIO_Init+0x310>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_GPIO_Init+0x334>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a32      	ldr	r2, [pc, #200]	@ (8003588 <HAL_GPIO_Init+0x334>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b30      	ldr	r3, [pc, #192]	@ (8003588 <HAL_GPIO_Init+0x334>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <HAL_GPIO_Init+0x334>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <HAL_GPIO_Init+0x334>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003512:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <HAL_GPIO_Init+0x334>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_GPIO_Init+0x334>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353c:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <HAL_GPIO_Init+0x334>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f ae90 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	@ 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40021400 	.word	0x40021400
 8003580:	40021800 	.word	0x40021800
 8003584:	40021c00 	.word	0x40021c00
 8003588:	40013c00 	.word	0x40013c00

0800358c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e001      	b.n	80035ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d8:	e003      	b.n	80035e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	041a      	lsls	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	619a      	str	r2, [r3, #24]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	@ (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f806 	bl	8003620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e267      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d075      	beq.n	8003742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003656:	4b88      	ldr	r3, [pc, #544]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d00c      	beq.n	800367c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366a:	2b08      	cmp	r3, #8
 800366c:	d112      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800367a:	d10b      	bne.n	8003694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	4b7e      	ldr	r3, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d05b      	beq.n	8003740 <HAL_RCC_OscConfig+0x108>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d157      	bne.n	8003740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e242      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x74>
 800369e:	4b76      	ldr	r3, [pc, #472]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x98>
 80036b6:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xb0>
 80036d0:	4b69      	ldr	r3, [pc, #420]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a65      	ldr	r2, [pc, #404]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fd74 	bl	80021dc <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe fd70 	bl	80021dc <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e207      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b5b      	ldr	r3, [pc, #364]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xc0>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe fd60 	bl	80021dc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe fd5c 	bl	80021dc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1f3      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b51      	ldr	r3, [pc, #324]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0xe8>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374e:	4b4a      	ldr	r3, [pc, #296]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b47      	ldr	r3, [pc, #284]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b44      	ldr	r3, [pc, #272]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1c7      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4937      	ldr	r1, [pc, #220]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe fd15 	bl	80021dc <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe fd11 	bl	80021dc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1a8      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4925      	ldr	r1, [pc, #148]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <HAL_RCC_OscConfig+0x244>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe fcf4 	bl	80021dc <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe fcf0 	bl	80021dc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e187      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe fcd4 	bl	80021dc <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe fcd0 	bl	80021dc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e167      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <HAL_RCC_OscConfig+0x240>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x200>
 8003856:	e01b      	b.n	8003890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_OscConfig+0x248>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fe fcbd 	bl	80021dc <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00e      	b.n	8003884 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe fcb9 	bl	80021dc <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d907      	bls.n	8003884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e150      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003878:	40023800 	.word	0x40023800
 800387c:	42470000 	.word	0x42470000
 8003880:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ea      	bne.n	8003866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b81      	ldr	r3, [pc, #516]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038be:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b77      	ldr	r3, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b74      	ldr	r3, [pc, #464]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a73      	ldr	r2, [pc, #460]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fc79 	bl	80021dc <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7fe fc75 	bl	80021dc <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e10c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x474>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x2ea>
 8003914:	4b64      	ldr	r3, [pc, #400]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a63      	ldr	r2, [pc, #396]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	e01c      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x30c>
 800392a:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	@ 0x70
 8003936:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x324>
 8003944:	4b58      	ldr	r3, [pc, #352]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003948:	4a57      	ldr	r2, [pc, #348]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003950:	4b55      	ldr	r3, [pc, #340]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a54      	ldr	r2, [pc, #336]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fc3a 	bl	80021dc <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe fc36 	bl	80021dc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0cb      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCC_OscConfig+0x334>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fe fc24 	bl	80021dc <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe fc20 	bl	80021dc <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0b5      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a1 	beq.w	8003b18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d6:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d05c      	beq.n	8003a9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d141      	bne.n	8003a6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fbf4 	bl	80021dc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fbf0 	bl	80021dc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e087      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	491b      	ldr	r1, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fe fbc9 	bl	80021dc <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fe fbc5 	bl	80021dc <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e05c      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x416>
 8003a6c:	e054      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x478>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fbb2 	bl	80021dc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fe fbae 	bl	80021dc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e045      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_OscConfig+0x470>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x444>
 8003a9a:	e03d      	b.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e038      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d028      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d90c      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d044      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d119      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e067      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4934      	ldr	r1, [pc, #208]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fe fae0 	bl	80021dc <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe fadc 	bl	80021dc <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e04f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d20c      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fa40 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08006394 	.word	0x08006394
 8003cec:	20000030 	.word	0x20000030
 8003cf0:	20000034 	.word	0x20000034

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b094      	sub	sp, #80	@ 0x50
 8003cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d00:	2300      	movs	r3, #0
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	2300      	movs	r3, #0
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0c:	4b79      	ldr	r3, [pc, #484]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x40>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	f200 80e1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d26:	e0db      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b73      	ldr	r3, [pc, #460]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d2c:	e0db      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d32:	e0d8      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d063      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5e:	2300      	movs	r3, #0
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4621      	mov	r1, r4
 8003d80:	1a51      	subs	r1, r2, r1
 8003d82:	6139      	str	r1, [r7, #16]
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d98:	4659      	mov	r1, fp
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da2:	4651      	mov	r1, sl
 8003da4:	018a      	lsls	r2, r1, #6
 8003da6:	4651      	mov	r1, sl
 8003da8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dac:	4659      	mov	r1, fp
 8003dae:	eb63 0901 	sbc.w	r9, r3, r1
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	eb18 0303 	adds.w	r3, r8, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	eb49 0303 	adc.w	r3, r9, r3
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003de6:	4629      	mov	r1, r5
 8003de8:	024b      	lsls	r3, r1, #9
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df0:	4621      	mov	r1, r4
 8003df2:	024a      	lsls	r2, r1, #9
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e04:	f7fc fa34 	bl	8000270 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	e058      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b38      	ldr	r3, [pc, #224]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4641      	mov	r1, r8
 8003e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e64:	ebb2 040a 	subs.w	r4, r2, sl
 8003e68:	eb63 050b 	sbc.w	r5, r3, fp
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	00eb      	lsls	r3, r5, #3
 8003e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7a:	00e2      	lsls	r2, r4, #3
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	461d      	mov	r5, r3
 8003e80:	4643      	mov	r3, r8
 8003e82:	18e3      	adds	r3, r4, r3
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	464b      	mov	r3, r9
 8003e88:	eb45 0303 	adc.w	r3, r5, r3
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	028b      	lsls	r3, r1, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	028a      	lsls	r2, r1, #10
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb8:	f7fc f9da 	bl	8000270 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ed4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3750      	adds	r7, #80	@ 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000030 	.word	0x20000030

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff0 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4903      	ldr	r1, [pc, #12]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	080063a4 	.word	0x080063a4

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffdc 	bl	8003f00 <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0b5b      	lsrs	r3, r3, #13
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	080063a4 	.word	0x080063a4

08003f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e041      	b.n	8003ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd ff52 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 faac 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d001      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04e      	b.n	80040be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a23      	ldr	r2, [pc, #140]	@ (80040cc <HAL_TIM_Base_Start_IT+0xc4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d022      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404a:	d01d      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d018      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x80>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b06      	cmp	r3, #6
 8004098:	d010      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	e007      	b.n	80040bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40001800 	.word	0x40001800

080040e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	f241 1311 	movw	r3, #4369	@ 0x1111
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10f      	bne.n	8004130 <HAL_TIM_Base_Stop_IT+0x48>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	f240 4344 	movw	r3, #1092	@ 0x444
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_TIM_Base_Stop_IT+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01b      	beq.n	80041aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0202 	mvn.w	r2, #2
 800417a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f999 	bl	80044c8 <HAL_TIM_IC_CaptureCallback>
 8004196:	e005      	b.n	80041a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f98b 	bl	80044b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f99c 	bl	80044dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01b      	beq.n	80041f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0204 	mvn.w	r2, #4
 80041c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f973 	bl	80044c8 <HAL_TIM_IC_CaptureCallback>
 80041e2:	e005      	b.n	80041f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f965 	bl	80044b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f976 	bl	80044dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0208 	mvn.w	r2, #8
 8004212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2204      	movs	r2, #4
 8004218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f94d 	bl	80044c8 <HAL_TIM_IC_CaptureCallback>
 800422e:	e005      	b.n	800423c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f93f 	bl	80044b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f950 	bl	80044dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01b      	beq.n	800428e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0210 	mvn.w	r2, #16
 800425e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2208      	movs	r2, #8
 8004264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f927 	bl	80044c8 <HAL_TIM_IC_CaptureCallback>
 800427a:	e005      	b.n	8004288 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f919 	bl	80044b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f92a 	bl	80044dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0201 	mvn.w	r2, #1
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fd fcbd 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fae3 	bl	800489c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8fb 	bl	80044f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0220 	mvn.w	r2, #32
 8004316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fab5 	bl	8004888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_TIM_ConfigClockSource+0x1c>
 800433e:	2302      	movs	r3, #2
 8004340:	e0b4      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x186>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004368:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437a:	d03e      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xd4>
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004380:	f200 8087 	bhi.w	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004388:	f000 8086 	beq.w	8004498 <HAL_TIM_ConfigClockSource+0x172>
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004390:	d87f      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 8004392:	2b70      	cmp	r3, #112	@ 0x70
 8004394:	d01a      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0xa6>
 8004396:	2b70      	cmp	r3, #112	@ 0x70
 8004398:	d87b      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 800439a:	2b60      	cmp	r3, #96	@ 0x60
 800439c:	d050      	beq.n	8004440 <HAL_TIM_ConfigClockSource+0x11a>
 800439e:	2b60      	cmp	r3, #96	@ 0x60
 80043a0:	d877      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 80043a2:	2b50      	cmp	r3, #80	@ 0x50
 80043a4:	d03c      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0xfa>
 80043a6:	2b50      	cmp	r3, #80	@ 0x50
 80043a8:	d873      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d058      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x13a>
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	d86f      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	2b30      	cmp	r3, #48	@ 0x30
 80043b4:	d064      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0x15a>
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d86b      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d060      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0x15a>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d867      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d05c      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0x15a>
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d05a      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0x15a>
 80043ca:	e062      	b.n	8004492 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043dc:	f000 f9b8 	bl	8004750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
      break;
 80043f8:	e04f      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	f000 f9a1 	bl	8004750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800441c:	609a      	str	r2, [r3, #8]
      break;
 800441e:	e03c      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442c:	461a      	mov	r2, r3
 800442e:	f000 f915 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2150      	movs	r1, #80	@ 0x50
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f96e 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 800443e:	e02c      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444c:	461a      	mov	r2, r3
 800444e:	f000 f934 	bl	80046ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2160      	movs	r1, #96	@ 0x60
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f95e 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 800445e:	e01c      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446c:	461a      	mov	r2, r3
 800446e:	f000 f8f5 	bl	800465c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2140      	movs	r1, #64	@ 0x40
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f94e 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 800447e:	e00c      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 f945 	bl	800471a <TIM_ITRx_SetConfig>
      break;
 8004490:	e003      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
      break;
 8004496:	e000      	b.n	800449a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a46      	ldr	r2, [pc, #280]	@ (8004630 <TIM_Base_SetConfig+0x12c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <TIM_Base_SetConfig+0x40>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004522:	d00f      	beq.n	8004544 <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a43      	ldr	r2, [pc, #268]	@ (8004634 <TIM_Base_SetConfig+0x130>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00b      	beq.n	8004544 <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a42      	ldr	r2, [pc, #264]	@ (8004638 <TIM_Base_SetConfig+0x134>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a41      	ldr	r2, [pc, #260]	@ (800463c <TIM_Base_SetConfig+0x138>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <TIM_Base_SetConfig+0x13c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d108      	bne.n	8004556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a35      	ldr	r2, [pc, #212]	@ (8004630 <TIM_Base_SetConfig+0x12c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d02b      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004564:	d027      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a32      	ldr	r2, [pc, #200]	@ (8004634 <TIM_Base_SetConfig+0x130>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d023      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a31      	ldr	r2, [pc, #196]	@ (8004638 <TIM_Base_SetConfig+0x134>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01f      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a30      	ldr	r2, [pc, #192]	@ (800463c <TIM_Base_SetConfig+0x138>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01b      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2f      	ldr	r2, [pc, #188]	@ (8004640 <TIM_Base_SetConfig+0x13c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d017      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2e      	ldr	r2, [pc, #184]	@ (8004644 <TIM_Base_SetConfig+0x140>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2d      	ldr	r2, [pc, #180]	@ (8004648 <TIM_Base_SetConfig+0x144>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2c      	ldr	r2, [pc, #176]	@ (800464c <TIM_Base_SetConfig+0x148>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004650 <TIM_Base_SetConfig+0x14c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <TIM_Base_SetConfig+0x150>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a29      	ldr	r2, [pc, #164]	@ (8004658 <TIM_Base_SetConfig+0x154>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <TIM_Base_SetConfig+0x12c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_Base_SetConfig+0xf8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <TIM_Base_SetConfig+0x13c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d103      	bne.n	8004604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]
  }
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	40001800 	.word	0x40001800
 8004654:	40001c00 	.word	0x40001c00
 8004658:	40002000 	.word	0x40002000

0800465c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 030a 	bic.w	r3, r3, #10
 8004698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 0210 	bic.w	r2, r3, #16
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	f043 0307 	orr.w	r3, r3, #7
 800473c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800476a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	431a      	orrs	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e05a      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a21      	ldr	r2, [pc, #132]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d022      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f4:	d01d      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1a      	ldr	r2, [pc, #104]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40001800 	.word	0x40001800

08004888 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e042      	b.n	8004948 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fd fad6 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fdbd 	bl	8005474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	@ 0x28
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b20      	cmp	r3, #32
 800496e:	d175      	bne.n	8004a5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_UART_Transmit+0x2c>
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e06e      	b.n	8004a5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2221      	movs	r2, #33	@ 0x21
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498e:	f7fd fc25 	bl	80021dc <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a8:	d108      	bne.n	80049bc <HAL_UART_Transmit+0x6c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e003      	b.n	80049c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c4:	e02e      	b.n	8004a24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2180      	movs	r1, #128	@ 0x80
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fb1f 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e03a      	b.n	8004a5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3302      	adds	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e007      	b.n	8004a16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3301      	adds	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1cb      	bne.n	80049c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2140      	movs	r1, #64	@ 0x40
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 faeb 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d112      	bne.n	8004aa6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_UART_Receive_IT+0x26>
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e00b      	b.n	8004aa8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fb12 	bl	80050c6 <UART_Start_Receive_IT>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	e000      	b.n	8004aa8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_UART_IRQHandler+0x66>
 8004b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fbf2 	bl	80052f8 <UART_Receive_IT>
      return;
 8004b14:	e25b      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80de 	beq.w	8004cdc <HAL_UART_IRQHandler+0x22c>
 8004b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80d1 	beq.w	8004cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0xae>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_UART_IRQHandler+0xd2>
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xf6>
 8004b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d011      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x126>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f043 0208 	orr.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 81f2 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_UART_IRQHandler+0x14e>
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fb7d 	bl	80052f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b40      	cmp	r3, #64	@ 0x40
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_UART_IRQHandler+0x17a>
 8004c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04f      	beq.n	8004cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa85 	bl	800513a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b40      	cmp	r3, #64	@ 0x40
 8004c3c:	d141      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3314      	adds	r3, #20
 8004c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1d9      	bne.n	8004c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_UART_IRQHandler+0x3e0>)
 8004c98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fab5 	bl	800320e <HAL_DMA_Abort_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e00e      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f994 	bl	8004fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e00a      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f990 	bl	8004fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e006      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f98c 	bl	8004fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cd6:	e175      	b.n	8004fc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	bf00      	nop
    return;
 8004cda:	e173      	b.n	8004fc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 814f 	bne.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8148 	beq.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8141 	beq.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b40      	cmp	r3, #64	@ 0x40
 8004d24:	f040 80b6 	bne.w	8004e94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8145 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f080 813e 	bcs.w	8004fc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	f000 8088 	beq.w	8004e72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1d9      	bne.n	8004d62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3314      	adds	r3, #20
 8004db4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3314      	adds	r3, #20
 8004dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e1      	bne.n	8004dae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3314      	adds	r3, #20
 8004df0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3314      	adds	r3, #20
 8004e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e3      	bne.n	8004dea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e42:	f023 0310 	bic.w	r3, r3, #16
 8004e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e3      	bne.n	8004e30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe f95e 	bl	800312e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8b7 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e8e:	e09b      	b.n	8004fc8 <HAL_UART_IRQHandler+0x518>
 8004e90:	08005201 	.word	0x08005201
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 808e 	beq.w	8004fcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8089 	beq.w	8004fcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e3      	bne.n	8004eba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	623b      	str	r3, [r7, #32]
   return(result);
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e3      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f5c:	61fa      	str	r2, [r7, #28]
 8004f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e3      	bne.n	8004f38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f83d 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f82:	e023      	b.n	8004fcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x4f4>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f943 	bl	8005228 <UART_Transmit_IT>
    return;
 8004fa2:	e014      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <HAL_UART_IRQHandler+0x51e>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f983 	bl	80052c8 <UART_EndTransmit_IT>
    return;
 8004fc2:	e004      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
    return;
 8004fc4:	bf00      	nop
 8004fc6:	e002      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
      return;
 8004fc8:	bf00      	nop
 8004fca:	e000      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
      return;
 8004fcc:	bf00      	nop
  }
}
 8004fce:	37e8      	adds	r7, #232	@ 0xe8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	e03b      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800502c:	d037      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fd f8d5 	bl	80021dc <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <UART_WaitOnFlagUntilTimeout+0x30>
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e03a      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d023      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d020      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d01d      	beq.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d116      	bne.n	800509e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f857 	bl	800513a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2208      	movs	r2, #8
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e00f      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d0b4      	beq.n	8005026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2222      	movs	r2, #34	@ 0x22
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800510a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0220 	orr.w	r2, r2, #32
 800512a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800513a:	b480      	push	{r7}
 800513c:	b095      	sub	sp, #84	@ 0x54
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005162:	643a      	str	r2, [r7, #64]	@ 0x40
 8005164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	61fb      	str	r3, [r7, #28]
   return(result);
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800519c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e5      	bne.n	8005176 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d119      	bne.n	80051e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f023 0310 	bic.w	r3, r3, #16
 80051c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d2:	61ba      	str	r2, [r7, #24]
 80051d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6979      	ldr	r1, [r7, #20]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	613b      	str	r3, [r7, #16]
   return(result);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051f4:	bf00      	nop
 80051f6:	3754      	adds	r7, #84	@ 0x54
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fee4 	bl	8004fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b21      	cmp	r3, #33	@ 0x21
 800523a:	d13e      	bne.n	80052ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005244:	d114      	bne.n	8005270 <UART_Transmit_IT+0x48>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d110      	bne.n	8005270 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005262:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]
 800526e:	e008      	b.n	8005282 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6211      	str	r1, [r2, #32]
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4619      	mov	r1, r3
 8005290:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10f      	bne.n	80052b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e000      	b.n	80052bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
  }
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fe73 	bl	8004fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	@ 0x30
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b22      	cmp	r3, #34	@ 0x22
 800530a:	f040 80ae 	bne.w	800546a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005316:	d117      	bne.n	8005348 <UART_Receive_IT+0x50>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d113      	bne.n	8005348 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	b29a      	uxth	r2, r3
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	1c9a      	adds	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	629a      	str	r2, [r3, #40]	@ 0x28
 8005346:	e026      	b.n	8005396 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800535a:	d007      	beq.n	800536c <UART_Receive_IT+0x74>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <UART_Receive_IT+0x82>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e008      	b.n	800538c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29b      	uxth	r3, r3
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4619      	mov	r1, r3
 80053a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d15d      	bne.n	8005466 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0220 	bic.w	r2, r2, #32
 80053b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d135      	bne.n	800545c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f023 0310 	bic.w	r3, r3, #16
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005416:	623a      	str	r2, [r7, #32]
 8005418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	69f9      	ldr	r1, [r7, #28]
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	61bb      	str	r3, [r7, #24]
   return(result);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b10      	cmp	r3, #16
 8005436:	d10a      	bne.n	800544e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fdd1 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
 800545a:	e002      	b.n	8005462 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fc f98d 	bl	800177c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e002      	b.n	800546c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	e000      	b.n	800546c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
  }
}
 800546c:	4618      	mov	r0, r3
 800546e:	3730      	adds	r7, #48	@ 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005478:	b0c0      	sub	sp, #256	@ 0x100
 800547a:	af00      	add	r7, sp, #0
 800547c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	68d9      	ldr	r1, [r3, #12]
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	ea40 0301 	orr.w	r3, r0, r1
 800549c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054cc:	f021 010c 	bic.w	r1, r1, #12
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054da:	430b      	orrs	r3, r1
 80054dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	6999      	ldr	r1, [r3, #24]
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	ea40 0301 	orr.w	r3, r0, r1
 80054fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b8f      	ldr	r3, [pc, #572]	@ (8005740 <UART_SetConfig+0x2cc>)
 8005504:	429a      	cmp	r2, r3
 8005506:	d005      	beq.n	8005514 <UART_SetConfig+0xa0>
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b8d      	ldr	r3, [pc, #564]	@ (8005744 <UART_SetConfig+0x2d0>)
 8005510:	429a      	cmp	r2, r3
 8005512:	d104      	bne.n	800551e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005514:	f7fe fd14 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005518:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800551c:	e003      	b.n	8005526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800551e:	f7fe fcfb 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8005522:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	f040 810c 	bne.w	800574c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005538:	2200      	movs	r2, #0
 800553a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800553e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	1891      	adds	r1, r2, r2
 800554c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800554e:	415b      	adcs	r3, r3
 8005550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005556:	4621      	mov	r1, r4
 8005558:	eb12 0801 	adds.w	r8, r2, r1
 800555c:	4629      	mov	r1, r5
 800555e:	eb43 0901 	adc.w	r9, r3, r1
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005576:	4690      	mov	r8, r2
 8005578:	4699      	mov	r9, r3
 800557a:	4623      	mov	r3, r4
 800557c:	eb18 0303 	adds.w	r3, r8, r3
 8005580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005584:	462b      	mov	r3, r5
 8005586:	eb49 0303 	adc.w	r3, r9, r3
 800558a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800559a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800559e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055a2:	460b      	mov	r3, r1
 80055a4:	18db      	adds	r3, r3, r3
 80055a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a8:	4613      	mov	r3, r2
 80055aa:	eb42 0303 	adc.w	r3, r2, r3
 80055ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80055b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055b8:	f7fa fe5a 	bl	8000270 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4b61      	ldr	r3, [pc, #388]	@ (8005748 <UART_SetConfig+0x2d4>)
 80055c2:	fba3 2302 	umull	r2, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	011c      	lsls	r4, r3, #4
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055e4:	415b      	adcs	r3, r3
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055ec:	4641      	mov	r1, r8
 80055ee:	eb12 0a01 	adds.w	sl, r2, r1
 80055f2:	4649      	mov	r1, r9
 80055f4:	eb43 0b01 	adc.w	fp, r3, r1
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800560c:	4692      	mov	sl, r2
 800560e:	469b      	mov	fp, r3
 8005610:	4643      	mov	r3, r8
 8005612:	eb1a 0303 	adds.w	r3, sl, r3
 8005616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800561a:	464b      	mov	r3, r9
 800561c:	eb4b 0303 	adc.w	r3, fp, r3
 8005620:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005630:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005638:	460b      	mov	r3, r1
 800563a:	18db      	adds	r3, r3, r3
 800563c:	643b      	str	r3, [r7, #64]	@ 0x40
 800563e:	4613      	mov	r3, r2
 8005640:	eb42 0303 	adc.w	r3, r2, r3
 8005644:	647b      	str	r3, [r7, #68]	@ 0x44
 8005646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800564a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800564e:	f7fa fe0f 	bl	8000270 <__aeabi_uldivmod>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4611      	mov	r1, r2
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <UART_SetConfig+0x2d4>)
 800565a:	fba3 2301 	umull	r2, r3, r3, r1
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2264      	movs	r2, #100	@ 0x64
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	1acb      	subs	r3, r1, r3
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800566e:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <UART_SetConfig+0x2d4>)
 8005670:	fba3 2302 	umull	r2, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800567c:	441c      	add	r4, r3
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005688:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800568c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	1891      	adds	r1, r2, r2
 8005696:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005698:	415b      	adcs	r3, r3
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800569c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056a0:	4641      	mov	r1, r8
 80056a2:	1851      	adds	r1, r2, r1
 80056a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80056a6:	4649      	mov	r1, r9
 80056a8:	414b      	adcs	r3, r1
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056b8:	4659      	mov	r1, fp
 80056ba:	00cb      	lsls	r3, r1, #3
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c2:	4651      	mov	r1, sl
 80056c4:	00ca      	lsls	r2, r1, #3
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	4642      	mov	r2, r8
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d4:	464b      	mov	r3, r9
 80056d6:	460a      	mov	r2, r1
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056f4:	460b      	mov	r3, r1
 80056f6:	18db      	adds	r3, r3, r3
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fa:	4613      	mov	r3, r2
 80056fc:	eb42 0303 	adc.w	r3, r2, r3
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800570a:	f7fa fdb1 	bl	8000270 <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <UART_SetConfig+0x2d4>)
 8005714:	fba3 1302 	umull	r1, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	2164      	movs	r1, #100	@ 0x64
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	3332      	adds	r3, #50	@ 0x32
 8005726:	4a08      	ldr	r2, [pc, #32]	@ (8005748 <UART_SetConfig+0x2d4>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 0207 	and.w	r2, r3, #7
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4422      	add	r2, r4
 800573a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800573c:	e106      	b.n	800594c <UART_SetConfig+0x4d8>
 800573e:	bf00      	nop
 8005740:	40011000 	.word	0x40011000
 8005744:	40011400 	.word	0x40011400
 8005748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800574c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005750:	2200      	movs	r2, #0
 8005752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005756:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800575a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800575e:	4642      	mov	r2, r8
 8005760:	464b      	mov	r3, r9
 8005762:	1891      	adds	r1, r2, r2
 8005764:	6239      	str	r1, [r7, #32]
 8005766:	415b      	adcs	r3, r3
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
 800576a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800576e:	4641      	mov	r1, r8
 8005770:	1854      	adds	r4, r2, r1
 8005772:	4649      	mov	r1, r9
 8005774:	eb43 0501 	adc.w	r5, r3, r1
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	00eb      	lsls	r3, r5, #3
 8005782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005786:	00e2      	lsls	r2, r4, #3
 8005788:	4614      	mov	r4, r2
 800578a:	461d      	mov	r5, r3
 800578c:	4643      	mov	r3, r8
 800578e:	18e3      	adds	r3, r4, r3
 8005790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005794:	464b      	mov	r3, r9
 8005796:	eb45 0303 	adc.w	r3, r5, r3
 800579a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057ba:	4629      	mov	r1, r5
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	4621      	mov	r1, r4
 80057c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c4:	4621      	mov	r1, r4
 80057c6:	008a      	lsls	r2, r1, #2
 80057c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057cc:	f7fa fd50 	bl	8000270 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4b60      	ldr	r3, [pc, #384]	@ (8005958 <UART_SetConfig+0x4e4>)
 80057d6:	fba3 2302 	umull	r2, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	011c      	lsls	r4, r3, #4
 80057de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	61b9      	str	r1, [r7, #24]
 80057f8:	415b      	adcs	r3, r3
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005800:	4641      	mov	r1, r8
 8005802:	1851      	adds	r1, r2, r1
 8005804:	6139      	str	r1, [r7, #16]
 8005806:	4649      	mov	r1, r9
 8005808:	414b      	adcs	r3, r1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005818:	4659      	mov	r1, fp
 800581a:	00cb      	lsls	r3, r1, #3
 800581c:	4651      	mov	r1, sl
 800581e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005822:	4651      	mov	r1, sl
 8005824:	00ca      	lsls	r2, r1, #3
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	4603      	mov	r3, r0
 800582c:	4642      	mov	r2, r8
 800582e:	189b      	adds	r3, r3, r2
 8005830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005834:	464b      	mov	r3, r9
 8005836:	460a      	mov	r2, r1
 8005838:	eb42 0303 	adc.w	r3, r2, r3
 800583c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800584a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005858:	4649      	mov	r1, r9
 800585a:	008b      	lsls	r3, r1, #2
 800585c:	4641      	mov	r1, r8
 800585e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005862:	4641      	mov	r1, r8
 8005864:	008a      	lsls	r2, r1, #2
 8005866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800586a:	f7fa fd01 	bl	8000270 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4611      	mov	r1, r2
 8005874:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <UART_SetConfig+0x4e4>)
 8005876:	fba3 2301 	umull	r2, r3, r3, r1
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	2264      	movs	r2, #100	@ 0x64
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	1acb      	subs	r3, r1, r3
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	3332      	adds	r3, #50	@ 0x32
 8005888:	4a33      	ldr	r2, [pc, #204]	@ (8005958 <UART_SetConfig+0x4e4>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005894:	441c      	add	r4, r3
 8005896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589a:	2200      	movs	r2, #0
 800589c:	673b      	str	r3, [r7, #112]	@ 0x70
 800589e:	677a      	str	r2, [r7, #116]	@ 0x74
 80058a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058a4:	4642      	mov	r2, r8
 80058a6:	464b      	mov	r3, r9
 80058a8:	1891      	adds	r1, r2, r2
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	415b      	adcs	r3, r3
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b4:	4641      	mov	r1, r8
 80058b6:	1851      	adds	r1, r2, r1
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	4649      	mov	r1, r9
 80058bc:	414b      	adcs	r3, r1
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058cc:	4659      	mov	r1, fp
 80058ce:	00cb      	lsls	r3, r1, #3
 80058d0:	4651      	mov	r1, sl
 80058d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d6:	4651      	mov	r1, sl
 80058d8:	00ca      	lsls	r2, r1, #3
 80058da:	4610      	mov	r0, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	4642      	mov	r2, r8
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e6:	464b      	mov	r3, r9
 80058e8:	460a      	mov	r2, r1
 80058ea:	eb42 0303 	adc.w	r3, r2, r3
 80058ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005908:	4649      	mov	r1, r9
 800590a:	008b      	lsls	r3, r1, #2
 800590c:	4641      	mov	r1, r8
 800590e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005912:	4641      	mov	r1, r8
 8005914:	008a      	lsls	r2, r1, #2
 8005916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800591a:	f7fa fca9 	bl	8000270 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <UART_SetConfig+0x4e4>)
 8005924:	fba3 1302 	umull	r1, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	2164      	movs	r1, #100	@ 0x64
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	3332      	adds	r3, #50	@ 0x32
 8005936:	4a08      	ldr	r2, [pc, #32]	@ (8005958 <UART_SetConfig+0x4e4>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	f003 020f 	and.w	r2, r3, #15
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4422      	add	r2, r4
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005958:	51eb851f 	.word	0x51eb851f

0800595c <siprintf>:
 800595c:	b40e      	push	{r1, r2, r3}
 800595e:	b510      	push	{r4, lr}
 8005960:	b09d      	sub	sp, #116	@ 0x74
 8005962:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005964:	9002      	str	r0, [sp, #8]
 8005966:	9006      	str	r0, [sp, #24]
 8005968:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800596c:	480a      	ldr	r0, [pc, #40]	@ (8005998 <siprintf+0x3c>)
 800596e:	9107      	str	r1, [sp, #28]
 8005970:	9104      	str	r1, [sp, #16]
 8005972:	490a      	ldr	r1, [pc, #40]	@ (800599c <siprintf+0x40>)
 8005974:	f853 2b04 	ldr.w	r2, [r3], #4
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	2400      	movs	r4, #0
 800597c:	a902      	add	r1, sp, #8
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005984:	f000 f9a2 	bl	8005ccc <_svfiprintf_r>
 8005988:	9b02      	ldr	r3, [sp, #8]
 800598a:	701c      	strb	r4, [r3, #0]
 800598c:	b01d      	add	sp, #116	@ 0x74
 800598e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005992:	b003      	add	sp, #12
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	2000003c 	.word	0x2000003c
 800599c:	ffff0208 	.word	0xffff0208

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <__errno>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	@ (80059b8 <__errno+0x8>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	2000003c 	.word	0x2000003c

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4d0d      	ldr	r5, [pc, #52]	@ (80059f4 <__libc_init_array+0x38>)
 80059c0:	4c0d      	ldr	r4, [pc, #52]	@ (80059f8 <__libc_init_array+0x3c>)
 80059c2:	1b64      	subs	r4, r4, r5
 80059c4:	10a4      	asrs	r4, r4, #2
 80059c6:	2600      	movs	r6, #0
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	4d0b      	ldr	r5, [pc, #44]	@ (80059fc <__libc_init_array+0x40>)
 80059ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005a00 <__libc_init_array+0x44>)
 80059d0:	f000 fc64 	bl	800629c <_init>
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	2600      	movs	r6, #0
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	080063e8 	.word	0x080063e8
 80059f8:	080063e8 	.word	0x080063e8
 80059fc:	080063e8 	.word	0x080063e8
 8005a00:	080063ec 	.word	0x080063ec

08005a04 <__retarget_lock_acquire_recursive>:
 8005a04:	4770      	bx	lr

08005a06 <__retarget_lock_release_recursive>:
 8005a06:	4770      	bx	lr

08005a08 <memcpy>:
 8005a08:	440a      	add	r2, r1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xc>
 8005a12:	4770      	bx	lr
 8005a14:	b510      	push	{r4, lr}
 8005a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1e:	4291      	cmp	r1, r2
 8005a20:	d1f9      	bne.n	8005a16 <memcpy+0xe>
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <_free_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4605      	mov	r5, r0
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d041      	beq.n	8005ab0 <_free_r+0x8c>
 8005a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a30:	1f0c      	subs	r4, r1, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	18e4      	addlt	r4, r4, r3
 8005a38:	f000 f8e0 	bl	8005bfc <__malloc_lock>
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <_free_r+0x90>)
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x2c>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	4628      	mov	r0, r5
 8005a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4c:	f000 b8dc 	b.w	8005c08 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x42>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x1e>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x4c>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x42>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1850      	adds	r0, r2, r1
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x6c>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	1850      	adds	r0, r2, r1
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x22>
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4408      	add	r0, r1
 8005a8c:	6010      	str	r0, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x22>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x74>
 8005a92:	230c      	movs	r3, #12
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x22>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	1821      	adds	r1, r4, r0
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x22>
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200033ec 	.word	0x200033ec

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0f      	ldr	r6, [pc, #60]	@ (8005af8 <sbrk_aligned+0x40>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 fba4 	bl	8006210 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fb9f 	bl	8006210 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d103      	bne.n	8005ade <sbrk_aligned+0x26>
 8005ad6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005ada:	4620      	mov	r0, r4
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d0f8      	beq.n	8005ada <sbrk_aligned+0x22>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fb90 	bl	8006210 <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1f2      	bne.n	8005ada <sbrk_aligned+0x22>
 8005af4:	e7ef      	b.n	8005ad6 <sbrk_aligned+0x1e>
 8005af6:	bf00      	nop
 8005af8:	200033e8 	.word	0x200033e8

08005afc <_malloc_r>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	1ccd      	adds	r5, r1, #3
 8005b02:	f025 0503 	bic.w	r5, r5, #3
 8005b06:	3508      	adds	r5, #8
 8005b08:	2d0c      	cmp	r5, #12
 8005b0a:	bf38      	it	cc
 8005b0c:	250c      	movcc	r5, #12
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	4606      	mov	r6, r0
 8005b12:	db01      	blt.n	8005b18 <_malloc_r+0x1c>
 8005b14:	42a9      	cmp	r1, r5
 8005b16:	d904      	bls.n	8005b22 <_malloc_r+0x26>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	6033      	str	r3, [r6, #0]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bf8 <_malloc_r+0xfc>
 8005b26:	f000 f869 	bl	8005bfc <__malloc_lock>
 8005b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2e:	461c      	mov	r4, r3
 8005b30:	bb44      	cbnz	r4, 8005b84 <_malloc_r+0x88>
 8005b32:	4629      	mov	r1, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ffbf 	bl	8005ab8 <sbrk_aligned>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	d158      	bne.n	8005bf2 <_malloc_r+0xf6>
 8005b40:	f8d8 4000 	ldr.w	r4, [r8]
 8005b44:	4627      	mov	r7, r4
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	d143      	bne.n	8005bd2 <_malloc_r+0xd6>
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d04b      	beq.n	8005be6 <_malloc_r+0xea>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	4639      	mov	r1, r7
 8005b52:	4630      	mov	r0, r6
 8005b54:	eb04 0903 	add.w	r9, r4, r3
 8005b58:	f000 fb5a 	bl	8006210 <_sbrk_r>
 8005b5c:	4581      	cmp	r9, r0
 8005b5e:	d142      	bne.n	8005be6 <_malloc_r+0xea>
 8005b60:	6821      	ldr	r1, [r4, #0]
 8005b62:	1a6d      	subs	r5, r5, r1
 8005b64:	4629      	mov	r1, r5
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff ffa6 	bl	8005ab8 <sbrk_aligned>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d03a      	beq.n	8005be6 <_malloc_r+0xea>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	442b      	add	r3, r5
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	bb62      	cbnz	r2, 8005bd8 <_malloc_r+0xdc>
 8005b7e:	f8c8 7000 	str.w	r7, [r8]
 8005b82:	e00f      	b.n	8005ba4 <_malloc_r+0xa8>
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	1b52      	subs	r2, r2, r5
 8005b88:	d420      	bmi.n	8005bcc <_malloc_r+0xd0>
 8005b8a:	2a0b      	cmp	r2, #11
 8005b8c:	d917      	bls.n	8005bbe <_malloc_r+0xc2>
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	6025      	str	r5, [r4, #0]
 8005b94:	bf18      	it	ne
 8005b96:	6059      	strne	r1, [r3, #4]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	bf08      	it	eq
 8005b9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ba0:	5162      	str	r2, [r4, r5]
 8005ba2:	604b      	str	r3, [r1, #4]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f000 f82f 	bl	8005c08 <__malloc_unlock>
 8005baa:	f104 000b 	add.w	r0, r4, #11
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	f020 0007 	bic.w	r0, r0, #7
 8005bb4:	1ac2      	subs	r2, r0, r3
 8005bb6:	bf1c      	itt	ne
 8005bb8:	1a1b      	subne	r3, r3, r0
 8005bba:	50a3      	strne	r3, [r4, r2]
 8005bbc:	e7af      	b.n	8005b1e <_malloc_r+0x22>
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	bf0c      	ite	eq
 8005bc4:	f8c8 2000 	streq.w	r2, [r8]
 8005bc8:	605a      	strne	r2, [r3, #4]
 8005bca:	e7eb      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bcc:	4623      	mov	r3, r4
 8005bce:	6864      	ldr	r4, [r4, #4]
 8005bd0:	e7ae      	b.n	8005b30 <_malloc_r+0x34>
 8005bd2:	463c      	mov	r4, r7
 8005bd4:	687f      	ldr	r7, [r7, #4]
 8005bd6:	e7b6      	b.n	8005b46 <_malloc_r+0x4a>
 8005bd8:	461a      	mov	r2, r3
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d1fb      	bne.n	8005bd8 <_malloc_r+0xdc>
 8005be0:	2300      	movs	r3, #0
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7de      	b.n	8005ba4 <_malloc_r+0xa8>
 8005be6:	230c      	movs	r3, #12
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f80c 	bl	8005c08 <__malloc_unlock>
 8005bf0:	e794      	b.n	8005b1c <_malloc_r+0x20>
 8005bf2:	6005      	str	r5, [r0, #0]
 8005bf4:	e7d6      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bf6:	bf00      	nop
 8005bf8:	200033ec 	.word	0x200033ec

08005bfc <__malloc_lock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	@ (8005c04 <__malloc_lock+0x8>)
 8005bfe:	f7ff bf01 	b.w	8005a04 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	200033e4 	.word	0x200033e4

08005c08 <__malloc_unlock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	@ (8005c10 <__malloc_unlock+0x8>)
 8005c0a:	f7ff befc 	b.w	8005a06 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	200033e4 	.word	0x200033e4

08005c14 <__ssputs_r>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	688e      	ldr	r6, [r1, #8]
 8005c1a:	461f      	mov	r7, r3
 8005c1c:	42be      	cmp	r6, r7
 8005c1e:	680b      	ldr	r3, [r1, #0]
 8005c20:	4682      	mov	sl, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	4690      	mov	r8, r2
 8005c26:	d82d      	bhi.n	8005c84 <__ssputs_r+0x70>
 8005c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c30:	d026      	beq.n	8005c80 <__ssputs_r+0x6c>
 8005c32:	6965      	ldr	r5, [r4, #20]
 8005c34:	6909      	ldr	r1, [r1, #16]
 8005c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c3a:	eba3 0901 	sub.w	r9, r3, r1
 8005c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c42:	1c7b      	adds	r3, r7, #1
 8005c44:	444b      	add	r3, r9
 8005c46:	106d      	asrs	r5, r5, #1
 8005c48:	429d      	cmp	r5, r3
 8005c4a:	bf38      	it	cc
 8005c4c:	461d      	movcc	r5, r3
 8005c4e:	0553      	lsls	r3, r2, #21
 8005c50:	d527      	bpl.n	8005ca2 <__ssputs_r+0x8e>
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7ff ff52 	bl	8005afc <_malloc_r>
 8005c58:	4606      	mov	r6, r0
 8005c5a:	b360      	cbz	r0, 8005cb6 <__ssputs_r+0xa2>
 8005c5c:	6921      	ldr	r1, [r4, #16]
 8005c5e:	464a      	mov	r2, r9
 8005c60:	f7ff fed2 	bl	8005a08 <memcpy>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	6126      	str	r6, [r4, #16]
 8005c72:	6165      	str	r5, [r4, #20]
 8005c74:	444e      	add	r6, r9
 8005c76:	eba5 0509 	sub.w	r5, r5, r9
 8005c7a:	6026      	str	r6, [r4, #0]
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	463e      	mov	r6, r7
 8005c80:	42be      	cmp	r6, r7
 8005c82:	d900      	bls.n	8005c86 <__ssputs_r+0x72>
 8005c84:	463e      	mov	r6, r7
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	f000 faa6 	bl	80061dc <memmove>
 8005c90:	68a3      	ldr	r3, [r4, #8]
 8005c92:	1b9b      	subs	r3, r3, r6
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	4433      	add	r3, r6
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	f000 fac4 	bl	8006230 <_realloc_r>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1e0      	bne.n	8005c70 <__ssputs_r+0x5c>
 8005cae:	6921      	ldr	r1, [r4, #16]
 8005cb0:	4650      	mov	r0, sl
 8005cb2:	f7ff feb7 	bl	8005a24 <_free_r>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	f8ca 3000 	str.w	r3, [sl]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cc8:	e7e9      	b.n	8005c9e <__ssputs_r+0x8a>
	...

08005ccc <_svfiprintf_r>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	898b      	ldrh	r3, [r1, #12]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	b09d      	sub	sp, #116	@ 0x74
 8005cd8:	4607      	mov	r7, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	d510      	bpl.n	8005d02 <_svfiprintf_r+0x36>
 8005ce0:	690b      	ldr	r3, [r1, #16]
 8005ce2:	b973      	cbnz	r3, 8005d02 <_svfiprintf_r+0x36>
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	f7ff ff09 	bl	8005afc <_malloc_r>
 8005cea:	6028      	str	r0, [r5, #0]
 8005cec:	6128      	str	r0, [r5, #16]
 8005cee:	b930      	cbnz	r0, 8005cfe <_svfiprintf_r+0x32>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cf8:	b01d      	add	sp, #116	@ 0x74
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	2340      	movs	r3, #64	@ 0x40
 8005d00:	616b      	str	r3, [r5, #20]
 8005d02:	2300      	movs	r3, #0
 8005d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d06:	2320      	movs	r3, #32
 8005d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d10:	2330      	movs	r3, #48	@ 0x30
 8005d12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005eb0 <_svfiprintf_r+0x1e4>
 8005d16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d1a:	f04f 0901 	mov.w	r9, #1
 8005d1e:	4623      	mov	r3, r4
 8005d20:	469a      	mov	sl, r3
 8005d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d26:	b10a      	cbz	r2, 8005d2c <_svfiprintf_r+0x60>
 8005d28:	2a25      	cmp	r2, #37	@ 0x25
 8005d2a:	d1f9      	bne.n	8005d20 <_svfiprintf_r+0x54>
 8005d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d30:	d00b      	beq.n	8005d4a <_svfiprintf_r+0x7e>
 8005d32:	465b      	mov	r3, fp
 8005d34:	4622      	mov	r2, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ff6b 	bl	8005c14 <__ssputs_r>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f000 80a7 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d46:	445a      	add	r2, fp
 8005d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809f 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d54:	2300      	movs	r3, #0
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5e:	f10a 0a01 	add.w	sl, sl, #1
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d6c:	4654      	mov	r4, sl
 8005d6e:	2205      	movs	r2, #5
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	484e      	ldr	r0, [pc, #312]	@ (8005eb0 <_svfiprintf_r+0x1e4>)
 8005d76:	f7fa fa2b 	bl	80001d0 <memchr>
 8005d7a:	9a04      	ldr	r2, [sp, #16]
 8005d7c:	b9d8      	cbnz	r0, 8005db6 <_svfiprintf_r+0xea>
 8005d7e:	06d0      	lsls	r0, r2, #27
 8005d80:	bf44      	itt	mi
 8005d82:	2320      	movmi	r3, #32
 8005d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d88:	0711      	lsls	r1, r2, #28
 8005d8a:	bf44      	itt	mi
 8005d8c:	232b      	movmi	r3, #43	@ 0x2b
 8005d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d92:	f89a 3000 	ldrb.w	r3, [sl]
 8005d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d98:	d015      	beq.n	8005dc6 <_svfiprintf_r+0xfa>
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	4654      	mov	r4, sl
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4621      	mov	r1, r4
 8005da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005daa:	3b30      	subs	r3, #48	@ 0x30
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d94b      	bls.n	8005e48 <_svfiprintf_r+0x17c>
 8005db0:	b1b0      	cbz	r0, 8005de0 <_svfiprintf_r+0x114>
 8005db2:	9207      	str	r2, [sp, #28]
 8005db4:	e014      	b.n	8005de0 <_svfiprintf_r+0x114>
 8005db6:	eba0 0308 	sub.w	r3, r0, r8
 8005dba:	fa09 f303 	lsl.w	r3, r9, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	46a2      	mov	sl, r4
 8005dc4:	e7d2      	b.n	8005d6c <_svfiprintf_r+0xa0>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfbb      	ittet	lt
 8005dd2:	425b      	neglt	r3, r3
 8005dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd8:	9307      	strge	r3, [sp, #28]
 8005dda:	9307      	strlt	r3, [sp, #28]
 8005ddc:	bfb8      	it	lt
 8005dde:	9204      	strlt	r2, [sp, #16]
 8005de0:	7823      	ldrb	r3, [r4, #0]
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d10a      	bne.n	8005dfc <_svfiprintf_r+0x130>
 8005de6:	7863      	ldrb	r3, [r4, #1]
 8005de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dea:	d132      	bne.n	8005e52 <_svfiprintf_r+0x186>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005df8:	3402      	adds	r4, #2
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ec0 <_svfiprintf_r+0x1f4>
 8005e00:	7821      	ldrb	r1, [r4, #0]
 8005e02:	2203      	movs	r2, #3
 8005e04:	4650      	mov	r0, sl
 8005e06:	f7fa f9e3 	bl	80001d0 <memchr>
 8005e0a:	b138      	cbz	r0, 8005e1c <_svfiprintf_r+0x150>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	eba0 000a 	sub.w	r0, r0, sl
 8005e12:	2240      	movs	r2, #64	@ 0x40
 8005e14:	4082      	lsls	r2, r0
 8005e16:	4313      	orrs	r3, r2
 8005e18:	3401      	adds	r4, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	4824      	ldr	r0, [pc, #144]	@ (8005eb4 <_svfiprintf_r+0x1e8>)
 8005e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e26:	2206      	movs	r2, #6
 8005e28:	f7fa f9d2 	bl	80001d0 <memchr>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d036      	beq.n	8005e9e <_svfiprintf_r+0x1d2>
 8005e30:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <_svfiprintf_r+0x1ec>)
 8005e32:	bb1b      	cbnz	r3, 8005e7c <_svfiprintf_r+0x1b0>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	3307      	adds	r3, #7
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e42:	4433      	add	r3, r6
 8005e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e46:	e76a      	b.n	8005d1e <_svfiprintf_r+0x52>
 8005e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7a8      	b.n	8005da4 <_svfiprintf_r+0xd8>
 8005e52:	2300      	movs	r3, #0
 8005e54:	3401      	adds	r4, #1
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e64:	3a30      	subs	r2, #48	@ 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x1a6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c6      	beq.n	8005dfc <_svfiprintf_r+0x130>
 8005e6e:	9105      	str	r1, [sp, #20]
 8005e70:	e7c4      	b.n	8005dfc <_svfiprintf_r+0x130>
 8005e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e76:	4604      	mov	r4, r0
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7f0      	b.n	8005e5e <_svfiprintf_r+0x192>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	462a      	mov	r2, r5
 8005e82:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4638      	mov	r0, r7
 8005e88:	f3af 8000 	nop.w
 8005e8c:	1c42      	adds	r2, r0, #1
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d1d6      	bne.n	8005e40 <_svfiprintf_r+0x174>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	065b      	lsls	r3, r3, #25
 8005e96:	f53f af2d 	bmi.w	8005cf4 <_svfiprintf_r+0x28>
 8005e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e9c:	e72c      	b.n	8005cf8 <_svfiprintf_r+0x2c>
 8005e9e:	ab03      	add	r3, sp, #12
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005ea6:	a904      	add	r1, sp, #16
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f000 f879 	bl	8005fa0 <_printf_i>
 8005eae:	e7ed      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005eb0:	080063ac 	.word	0x080063ac
 8005eb4:	080063b6 	.word	0x080063b6
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	08005c15 	.word	0x08005c15
 8005ec0:	080063b2 	.word	0x080063b2

08005ec4 <_printf_common>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	4616      	mov	r6, r2
 8005eca:	4698      	mov	r8, r3
 8005ecc:	688a      	ldr	r2, [r1, #8]
 8005ece:	690b      	ldr	r3, [r1, #16]
 8005ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bfb8      	it	lt
 8005ed8:	4613      	movlt	r3, r2
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b10a      	cbz	r2, 8005eea <_printf_common+0x26>
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	0699      	lsls	r1, r3, #26
 8005eee:	bf42      	ittt	mi
 8005ef0:	6833      	ldrmi	r3, [r6, #0]
 8005ef2:	3302      	addmi	r3, #2
 8005ef4:	6033      	strmi	r3, [r6, #0]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	f015 0506 	ands.w	r5, r5, #6
 8005efc:	d106      	bne.n	8005f0c <_printf_common+0x48>
 8005efe:	f104 0a19 	add.w	sl, r4, #25
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	6832      	ldr	r2, [r6, #0]
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dc26      	bgt.n	8005f5a <_printf_common+0x96>
 8005f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	3b00      	subs	r3, #0
 8005f14:	bf18      	it	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	0692      	lsls	r2, r2, #26
 8005f1a:	d42b      	bmi.n	8005f74 <_printf_common+0xb0>
 8005f1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f20:	4641      	mov	r1, r8
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c8      	blx	r9
 8005f26:	3001      	adds	r0, #1
 8005f28:	d01e      	beq.n	8005f68 <_printf_common+0xa4>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	f003 0306 	and.w	r3, r3, #6
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	bf02      	ittt	eq
 8005f36:	68e5      	ldreq	r5, [r4, #12]
 8005f38:	6833      	ldreq	r3, [r6, #0]
 8005f3a:	1aed      	subeq	r5, r5, r3
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	bf0c      	ite	eq
 8005f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f44:	2500      	movne	r5, #0
 8005f46:	4293      	cmp	r3, r2
 8005f48:	bfc4      	itt	gt
 8005f4a:	1a9b      	subgt	r3, r3, r2
 8005f4c:	18ed      	addgt	r5, r5, r3
 8005f4e:	2600      	movs	r6, #0
 8005f50:	341a      	adds	r4, #26
 8005f52:	42b5      	cmp	r5, r6
 8005f54:	d11a      	bne.n	8005f8c <_printf_common+0xc8>
 8005f56:	2000      	movs	r0, #0
 8005f58:	e008      	b.n	8005f6c <_printf_common+0xa8>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	4641      	mov	r1, r8
 8005f60:	4638      	mov	r0, r7
 8005f62:	47c8      	blx	r9
 8005f64:	3001      	adds	r0, #1
 8005f66:	d103      	bne.n	8005f70 <_printf_common+0xac>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f70:	3501      	adds	r5, #1
 8005f72:	e7c6      	b.n	8005f02 <_printf_common+0x3e>
 8005f74:	18e1      	adds	r1, r4, r3
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	2030      	movs	r0, #48	@ 0x30
 8005f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f7e:	4422      	add	r2, r4
 8005f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f88:	3302      	adds	r3, #2
 8005f8a:	e7c7      	b.n	8005f1c <_printf_common+0x58>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4641      	mov	r1, r8
 8005f92:	4638      	mov	r0, r7
 8005f94:	47c8      	blx	r9
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0e6      	beq.n	8005f68 <_printf_common+0xa4>
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7d9      	b.n	8005f52 <_printf_common+0x8e>
	...

08005fa0 <_printf_i>:
 8005fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	7e0f      	ldrb	r7, [r1, #24]
 8005fa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fa8:	2f78      	cmp	r7, #120	@ 0x78
 8005faa:	4691      	mov	r9, r2
 8005fac:	4680      	mov	r8, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	469a      	mov	sl, r3
 8005fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fb6:	d807      	bhi.n	8005fc8 <_printf_i+0x28>
 8005fb8:	2f62      	cmp	r7, #98	@ 0x62
 8005fba:	d80a      	bhi.n	8005fd2 <_printf_i+0x32>
 8005fbc:	2f00      	cmp	r7, #0
 8005fbe:	f000 80d1 	beq.w	8006164 <_printf_i+0x1c4>
 8005fc2:	2f58      	cmp	r7, #88	@ 0x58
 8005fc4:	f000 80b8 	beq.w	8006138 <_printf_i+0x198>
 8005fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fd0:	e03a      	b.n	8006048 <_printf_i+0xa8>
 8005fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fd6:	2b15      	cmp	r3, #21
 8005fd8:	d8f6      	bhi.n	8005fc8 <_printf_i+0x28>
 8005fda:	a101      	add	r1, pc, #4	@ (adr r1, 8005fe0 <_printf_i+0x40>)
 8005fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fe0:	08006039 	.word	0x08006039
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	08005fc9 	.word	0x08005fc9
 8005fec:	08005fc9 	.word	0x08005fc9
 8005ff0:	08005fc9 	.word	0x08005fc9
 8005ff4:	08005fc9 	.word	0x08005fc9
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08005fc9 	.word	0x08005fc9
 8006000:	08005fc9 	.word	0x08005fc9
 8006004:	08005fc9 	.word	0x08005fc9
 8006008:	08005fc9 	.word	0x08005fc9
 800600c:	0800614b 	.word	0x0800614b
 8006010:	08006077 	.word	0x08006077
 8006014:	08006105 	.word	0x08006105
 8006018:	08005fc9 	.word	0x08005fc9
 800601c:	08005fc9 	.word	0x08005fc9
 8006020:	0800616d 	.word	0x0800616d
 8006024:	08005fc9 	.word	0x08005fc9
 8006028:	08006077 	.word	0x08006077
 800602c:	08005fc9 	.word	0x08005fc9
 8006030:	08005fc9 	.word	0x08005fc9
 8006034:	0800610d 	.word	0x0800610d
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	1d1a      	adds	r2, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6032      	str	r2, [r6, #0]
 8006040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006048:	2301      	movs	r3, #1
 800604a:	e09c      	b.n	8006186 <_printf_i+0x1e6>
 800604c:	6833      	ldr	r3, [r6, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6031      	str	r1, [r6, #0]
 8006054:	0606      	lsls	r6, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xbc>
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	e003      	b.n	8006064 <_printf_i+0xc4>
 800605c:	0645      	lsls	r5, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xb8>
 8006060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006064:	2d00      	cmp	r5, #0
 8006066:	da03      	bge.n	8006070 <_printf_i+0xd0>
 8006068:	232d      	movs	r3, #45	@ 0x2d
 800606a:	426d      	negs	r5, r5
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006070:	4858      	ldr	r0, [pc, #352]	@ (80061d4 <_printf_i+0x234>)
 8006072:	230a      	movs	r3, #10
 8006074:	e011      	b.n	800609a <_printf_i+0xfa>
 8006076:	6821      	ldr	r1, [r4, #0]
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	0608      	lsls	r0, r1, #24
 800607c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006080:	d402      	bmi.n	8006088 <_printf_i+0xe8>
 8006082:	0649      	lsls	r1, r1, #25
 8006084:	bf48      	it	mi
 8006086:	b2ad      	uxthmi	r5, r5
 8006088:	2f6f      	cmp	r7, #111	@ 0x6f
 800608a:	4852      	ldr	r0, [pc, #328]	@ (80061d4 <_printf_i+0x234>)
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	bf14      	ite	ne
 8006090:	230a      	movne	r3, #10
 8006092:	2308      	moveq	r3, #8
 8006094:	2100      	movs	r1, #0
 8006096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800609a:	6866      	ldr	r6, [r4, #4]
 800609c:	60a6      	str	r6, [r4, #8]
 800609e:	2e00      	cmp	r6, #0
 80060a0:	db05      	blt.n	80060ae <_printf_i+0x10e>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	432e      	orrs	r6, r5
 80060a6:	f021 0104 	bic.w	r1, r1, #4
 80060aa:	6021      	str	r1, [r4, #0]
 80060ac:	d04b      	beq.n	8006146 <_printf_i+0x1a6>
 80060ae:	4616      	mov	r6, r2
 80060b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80060b4:	fb03 5711 	mls	r7, r3, r1, r5
 80060b8:	5dc7      	ldrb	r7, [r0, r7]
 80060ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060be:	462f      	mov	r7, r5
 80060c0:	42bb      	cmp	r3, r7
 80060c2:	460d      	mov	r5, r1
 80060c4:	d9f4      	bls.n	80060b0 <_printf_i+0x110>
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d10b      	bne.n	80060e2 <_printf_i+0x142>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	07df      	lsls	r7, r3, #31
 80060ce:	d508      	bpl.n	80060e2 <_printf_i+0x142>
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	6861      	ldr	r1, [r4, #4]
 80060d4:	4299      	cmp	r1, r3
 80060d6:	bfde      	ittt	le
 80060d8:	2330      	movle	r3, #48	@ 0x30
 80060da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060de:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060e2:	1b92      	subs	r2, r2, r6
 80060e4:	6122      	str	r2, [r4, #16]
 80060e6:	f8cd a000 	str.w	sl, [sp]
 80060ea:	464b      	mov	r3, r9
 80060ec:	aa03      	add	r2, sp, #12
 80060ee:	4621      	mov	r1, r4
 80060f0:	4640      	mov	r0, r8
 80060f2:	f7ff fee7 	bl	8005ec4 <_printf_common>
 80060f6:	3001      	adds	r0, #1
 80060f8:	d14a      	bne.n	8006190 <_printf_i+0x1f0>
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060fe:	b004      	add	sp, #16
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f043 0320 	orr.w	r3, r3, #32
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	4832      	ldr	r0, [pc, #200]	@ (80061d8 <_printf_i+0x238>)
 800610e:	2778      	movs	r7, #120	@ 0x78
 8006110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	6831      	ldr	r1, [r6, #0]
 8006118:	061f      	lsls	r7, r3, #24
 800611a:	f851 5b04 	ldr.w	r5, [r1], #4
 800611e:	d402      	bmi.n	8006126 <_printf_i+0x186>
 8006120:	065f      	lsls	r7, r3, #25
 8006122:	bf48      	it	mi
 8006124:	b2ad      	uxthmi	r5, r5
 8006126:	6031      	str	r1, [r6, #0]
 8006128:	07d9      	lsls	r1, r3, #31
 800612a:	bf44      	itt	mi
 800612c:	f043 0320 	orrmi.w	r3, r3, #32
 8006130:	6023      	strmi	r3, [r4, #0]
 8006132:	b11d      	cbz	r5, 800613c <_printf_i+0x19c>
 8006134:	2310      	movs	r3, #16
 8006136:	e7ad      	b.n	8006094 <_printf_i+0xf4>
 8006138:	4826      	ldr	r0, [pc, #152]	@ (80061d4 <_printf_i+0x234>)
 800613a:	e7e9      	b.n	8006110 <_printf_i+0x170>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	f023 0320 	bic.w	r3, r3, #32
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	e7f6      	b.n	8006134 <_printf_i+0x194>
 8006146:	4616      	mov	r6, r2
 8006148:	e7bd      	b.n	80060c6 <_printf_i+0x126>
 800614a:	6833      	ldr	r3, [r6, #0]
 800614c:	6825      	ldr	r5, [r4, #0]
 800614e:	6961      	ldr	r1, [r4, #20]
 8006150:	1d18      	adds	r0, r3, #4
 8006152:	6030      	str	r0, [r6, #0]
 8006154:	062e      	lsls	r6, r5, #24
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	d501      	bpl.n	800615e <_printf_i+0x1be>
 800615a:	6019      	str	r1, [r3, #0]
 800615c:	e002      	b.n	8006164 <_printf_i+0x1c4>
 800615e:	0668      	lsls	r0, r5, #25
 8006160:	d5fb      	bpl.n	800615a <_printf_i+0x1ba>
 8006162:	8019      	strh	r1, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	4616      	mov	r6, r2
 800616a:	e7bc      	b.n	80060e6 <_printf_i+0x146>
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	6032      	str	r2, [r6, #0]
 8006172:	681e      	ldr	r6, [r3, #0]
 8006174:	6862      	ldr	r2, [r4, #4]
 8006176:	2100      	movs	r1, #0
 8006178:	4630      	mov	r0, r6
 800617a:	f7fa f829 	bl	80001d0 <memchr>
 800617e:	b108      	cbz	r0, 8006184 <_printf_i+0x1e4>
 8006180:	1b80      	subs	r0, r0, r6
 8006182:	6060      	str	r0, [r4, #4]
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	2300      	movs	r3, #0
 800618a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618e:	e7aa      	b.n	80060e6 <_printf_i+0x146>
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	4632      	mov	r2, r6
 8006194:	4649      	mov	r1, r9
 8006196:	4640      	mov	r0, r8
 8006198:	47d0      	blx	sl
 800619a:	3001      	adds	r0, #1
 800619c:	d0ad      	beq.n	80060fa <_printf_i+0x15a>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	079b      	lsls	r3, r3, #30
 80061a2:	d413      	bmi.n	80061cc <_printf_i+0x22c>
 80061a4:	68e0      	ldr	r0, [r4, #12]
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	4298      	cmp	r0, r3
 80061aa:	bfb8      	it	lt
 80061ac:	4618      	movlt	r0, r3
 80061ae:	e7a6      	b.n	80060fe <_printf_i+0x15e>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4632      	mov	r2, r6
 80061b4:	4649      	mov	r1, r9
 80061b6:	4640      	mov	r0, r8
 80061b8:	47d0      	blx	sl
 80061ba:	3001      	adds	r0, #1
 80061bc:	d09d      	beq.n	80060fa <_printf_i+0x15a>
 80061be:	3501      	adds	r5, #1
 80061c0:	68e3      	ldr	r3, [r4, #12]
 80061c2:	9903      	ldr	r1, [sp, #12]
 80061c4:	1a5b      	subs	r3, r3, r1
 80061c6:	42ab      	cmp	r3, r5
 80061c8:	dcf2      	bgt.n	80061b0 <_printf_i+0x210>
 80061ca:	e7eb      	b.n	80061a4 <_printf_i+0x204>
 80061cc:	2500      	movs	r5, #0
 80061ce:	f104 0619 	add.w	r6, r4, #25
 80061d2:	e7f5      	b.n	80061c0 <_printf_i+0x220>
 80061d4:	080063bd 	.word	0x080063bd
 80061d8:	080063ce 	.word	0x080063ce

080061dc <memmove>:
 80061dc:	4288      	cmp	r0, r1
 80061de:	b510      	push	{r4, lr}
 80061e0:	eb01 0402 	add.w	r4, r1, r2
 80061e4:	d902      	bls.n	80061ec <memmove+0x10>
 80061e6:	4284      	cmp	r4, r0
 80061e8:	4623      	mov	r3, r4
 80061ea:	d807      	bhi.n	80061fc <memmove+0x20>
 80061ec:	1e43      	subs	r3, r0, #1
 80061ee:	42a1      	cmp	r1, r4
 80061f0:	d008      	beq.n	8006204 <memmove+0x28>
 80061f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061fa:	e7f8      	b.n	80061ee <memmove+0x12>
 80061fc:	4402      	add	r2, r0
 80061fe:	4601      	mov	r1, r0
 8006200:	428a      	cmp	r2, r1
 8006202:	d100      	bne.n	8006206 <memmove+0x2a>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800620a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800620e:	e7f7      	b.n	8006200 <memmove+0x24>

08006210 <_sbrk_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	@ (800622c <_sbrk_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fb ff06 	bl	800202c <_sbrk>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_sbrk_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_sbrk_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	200033e0 	.word	0x200033e0

08006230 <_realloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	4607      	mov	r7, r0
 8006236:	4614      	mov	r4, r2
 8006238:	460d      	mov	r5, r1
 800623a:	b921      	cbnz	r1, 8006246 <_realloc_r+0x16>
 800623c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	4611      	mov	r1, r2
 8006242:	f7ff bc5b 	b.w	8005afc <_malloc_r>
 8006246:	b92a      	cbnz	r2, 8006254 <_realloc_r+0x24>
 8006248:	f7ff fbec 	bl	8005a24 <_free_r>
 800624c:	4625      	mov	r5, r4
 800624e:	4628      	mov	r0, r5
 8006250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006254:	f000 f81a 	bl	800628c <_malloc_usable_size_r>
 8006258:	4284      	cmp	r4, r0
 800625a:	4606      	mov	r6, r0
 800625c:	d802      	bhi.n	8006264 <_realloc_r+0x34>
 800625e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006262:	d8f4      	bhi.n	800624e <_realloc_r+0x1e>
 8006264:	4621      	mov	r1, r4
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff fc48 	bl	8005afc <_malloc_r>
 800626c:	4680      	mov	r8, r0
 800626e:	b908      	cbnz	r0, 8006274 <_realloc_r+0x44>
 8006270:	4645      	mov	r5, r8
 8006272:	e7ec      	b.n	800624e <_realloc_r+0x1e>
 8006274:	42b4      	cmp	r4, r6
 8006276:	4622      	mov	r2, r4
 8006278:	4629      	mov	r1, r5
 800627a:	bf28      	it	cs
 800627c:	4632      	movcs	r2, r6
 800627e:	f7ff fbc3 	bl	8005a08 <memcpy>
 8006282:	4629      	mov	r1, r5
 8006284:	4638      	mov	r0, r7
 8006286:	f7ff fbcd 	bl	8005a24 <_free_r>
 800628a:	e7f1      	b.n	8006270 <_realloc_r+0x40>

0800628c <_malloc_usable_size_r>:
 800628c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006290:	1f18      	subs	r0, r3, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfbc      	itt	lt
 8006296:	580b      	ldrlt	r3, [r1, r0]
 8006298:	18c0      	addlt	r0, r0, r3
 800629a:	4770      	bx	lr

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
